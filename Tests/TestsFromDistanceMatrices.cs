using Microsoft.VisualStudio.TestTools.UnitTesting;
using PhyloTree;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Tests
{
    [TestClass]
    public class TestsFromDistanceMatrices
    {
        private static Dictionary<string, string> ReadFasta(Stream fastaFileStream)
        {
            Dictionary<string, string> tbr = new Dictionary<string, string>();

            using (StreamReader sr = new StreamReader(fastaFileStream))
            {
                string currSeqName = "";
                string currSeq = "";


                string line = sr.ReadLine();
                while (!string.IsNullOrEmpty(line))
                {
                    if (line.StartsWith(">"))
                    {
                        if (!string.IsNullOrEmpty(currSeqName))
                        {
                            tbr.Add(currSeqName, currSeq);
                        }
                        currSeqName = line.Substring(1);
                        currSeq = "";
                    }
                    else
                    {
                        currSeq += line;
                    }

                    line = sr.ReadLine();
                }
                if (!string.IsNullOrEmpty(currSeqName))
                {
                    tbr.Add(currSeqName, currSeq);
                }
            }

            return tbr;
        }

        private static List<string> SequenceNames = ReadFasta(Assembly.GetExecutingAssembly().GetManifestResourceStream("Tests.Data.AlignmentDNA.fas")).Keys.ToList();

        private const string Tree2 = "('t33':0.15886,'t35':0.15886);";
        private const string Tree3 = "('t35':0.072203,'t33':0.086653,'t40':0.031815);";
        private const string Tree4 = "(('t40':0.028306,'t33':0.090162):0.0098032,'t2':0.25594,'t35':0.062399);";
        private const string Tree10 = "((('t40':0.03624,'t35':0.067778):0.0020171,(((('t14':0.070353,'t5':0.072432):0.081091,'t8':0.00094573):0.025474,'t12':0.07349):0.089481,'t33':0.077276):0.0099832):0.081587,('t20':0.042888,'t2':0.073342):0.10005,'t25':0.024199);";
        private const string FullTree = "((((((('t4':0.047383,'t45':0.051):0.0092421,('t7':0.11185,'t30':0.036154):0.018282):0.072753,'t31':0.067808):0.0051978,'t6':0.033711):0.023156,((((('t14':0.074136,'t5':0.068649):0.076939,'t8':0.0050979):0.024401,'t12':0.074563):0.032114,((('t40':0.035421,'t35':0.068597):0.0065015,(('t20':0.044684,'t2':0.071546):0.10358,'t25':0.020673):0.077103):0.0065747,'t33':0.081997):0.056056):0.025946,(((((('t17':0.064559,'t29':0.067425):0.0090533,(('t32':0.12143,'t28':0.014715):0.010241,(('t41':0.056374,'t15':0.070383):0.021033,'t27':0.1375):0.061017):0.029866):0.02886,('t34':0.1009,'t13':0.017741):0.035089):0.076418,('t38':0.03919,'t42':0.044696):0.094981):0.0040325,'t21':0.038985):0.0089579,((('t9':0.073312,'t36':0.044068):0.023815,('t43':0.060585,'t37':0.013172):0.09307):0.03533,((('t46':0.0024457,'t22':0.019847):0.033494,(('t18':0.0051341,'t48':0.13012):0.057865,'t3':0.0099579):0.065856):0.079945,'t26':0.081354):0.04258):0.074675):0.050615):0.043369):0.001999,((('t24':0.12284,'t19':0.026459):0.015652,'t39':0.00088717):0.091683,'t50':0.043813):0.0094682):0.061071,((((('t10':0.038851,'t11':0.017661):0.054724,'t16':0.045774):0.061579,('t23':0.047232,'t49':0.0094125):0.10364):0.036765,'t44':0.069342):0.070703,'t1':0.037936):0.03408,'t47':0.020077);";
        private const string FullTreeShort = "((((((('t24':0,'t19':0):-7.4506E-08,'t39':7.4506E-08):0.047451,'t34':0.19183):0.056606,'t30':-0.0049501):0.0024751,'t50':-0.0024751):0.0014647,((((((((((((((((('t32':0.0062317,'t41':0.57534):0.039963,'t27':0.031957):0.037274,'t15':0.015352):0.11676,'t29':-0.070186):0.032386,'t28':-0.032386):0.016751,'t17':-0.016751):0.031658,'t13':-0.031658):0.11588,'t5':0.07578):0.034224,'t40':-0.012694):0.0037279,(((((((('t9':0.28377,'t2':-0.17531):0.080537,'t20':0.17385):0.10248,'t37':0.021702):0.063564,'t43':0.097061):0.060253,(((((((('t48':0,'t18':0):0.65448,'t46':-0.4152):0.21211,'t22':-0.21211):0.10841,'t3':-0.10841):0.1088,'t26':0.15288):0.37288,'t33':-0.17656):0.20514,'t21':-0.046327):0.1364,'t36':-0.078888):0.058665):0.083799,'t8':-0.032713):0.013098,'t14':0.11312):0.0068192,'t25':-0.015693):0.0073157):0.0023943,'t35':-0.0079161):0.0043178,'t38':-0.0043178):0.010356,(('t1':0.080787,'t12':0.030785):0.041063,'t42':0.074446):0.054347):0.044835,(('t49':0,'t44':0):1.4901E-08,'t23':-1.4901E-08):0.041514):0.019866,((('t11':-0.04,'t10':0.14847):0.020606,'t16':-0.020606):0.075713,'t7':0.038339):0.089374):0.044754,'t45':-0.0068872):0.0030132,'t31':-0.0030132):0.0020307):0.00050019,('t6':-0.0035968,'t4':0.11206):0.0022479,'t47':-0.0022479);";
        private const string FullTreeShortNoNegative = "((((((('t24':0,'t19':0):0,'t39':0):0.047451,'t34':0.19183):0.051656,'t30':0):0,'t50':0):0.0014647,(((((((((((((((('t9':0.10847,'t2':0):0.080537,'t20':0.17385):0.10248,'t37':0.021702):0.063564,'t43':0.097061):0.060253,(((((((('t48':0,'t18':0):0.23928,'t46':0):0,'t22':0):0,'t3':0):0.1088,'t26':0.15288):0.19632,'t33':0):0.15881,'t21':0):0.057509,'t36':0):0.058665):0.051087,'t8':0):0.013098,'t14':0.11312):0,'t40':0):0.0043293,((((((((('t32':0.0062317,'t41':0.57534):0.043107,'t27':0.028813):0.038886,'t15':0.01374):0.062299,'t29':0):0,'t28':0):0,'t17':0):0,'t13':0):0.1149,'t5':0.07578):0.02153,'t25':0):0.0044958):0,'t35':0):0,'t38':0):0.0086984,(('t1':0.080787,'t12':0.030785):0.041063,'t42':0.074446):0.054347):0.044835,(('t49':0,'t44':0):0,'t23':0):0.041514):0.019866,((('t11':0,'t10':0.10847):0,'t16':0):0.075713,'t7':0.038339):0.089374):0.037867,'t45':0):0,'t31':0):0.0020307):0.001374,('t6':0,'t4':0.10847):0.001374,'t47':0);";

        private static float[][] DistMat2 = new float[][] { new float[] { 0, 0.158855692F }, new float[] { 0.158855692F, 0 } };
        private static float[][] DistMat3 = new float[][] { new float[] { 0, 0.15885569F, 0.11846806F }, new float[] { 0.15885569F, 0, 0.10401745F }, new float[] { 0.11846806F, 0.10401745F, 0 } };
        private static float[][] DistMat4 = new float[][] { new float[] { 0F, 0.15885569F, 0.11846806F, 0.35941154F }, new float[] { 0.15885569F, 0F, 0.10401745F, 0.3183376F }, new float[] { 0.11846806F, 0.10401745F, 0F, 0.29053935F }, new float[] { 0.35941154F, 0.3183376F, 0.29053935F, 0F } };
        private static float[][] DistMat10 = new float[][] { new float[] { 0F, 0.15885569F, 0.11846806F, 0.35941154F, 0.31619182F, 0.19275457F, 0.23854329F, 0.3460285F, 0.35039333F, 0.1930898F }, new float[] { 0.15885569F, 0F, 0.10401745F, 0.3183376F, 0.29300135F, 0.17950477F, 0.23844789F, 0.35140216F, 0.3459129F, 0.19546866F }, new float[] { 0.11846806F, 0.10401745F, 0F, 0.29053935F, 0.26424354F, 0.1446233F, 0.22179109F, 0.3170976F, 0.32715312F, 0.16489509F }, new float[] { 0.35941154F, 0.3183376F, 0.29053935F, 0F, 0.11622926F, 0.19078436F, 0.41862476F, 0.5395212F, 0.51513845F, 0.3793352F }, new float[] { 0.31619182F, 0.29300135F, 0.26424354F, 0.11622926F, 0F, 0.17395239F, 0.3887386F, 0.5028363F, 0.47677243F, 0.35232353F }, new float[] { 0.19275457F, 0.17950477F, 0.1446233F, 0.19078436F, 0.17395239F, 0F, 0.27862552F, 0.37751007F, 0.37836838F, 0.22167304F }, new float[] { 0.23854329F, 0.23844789F, 0.22179109F, 0.41862476F, 0.3887386F, 0.27862552F, 0F, 0.24799475F, 0.24600567F, 0.10435641F }, new float[] { 0.3460285F, 0.35140216F, 0.3170976F, 0.5395212F, 0.5028363F, 0.37751007F, 0.24799475F, 0F, 0.14278442F, 0.15199447F }, new float[] { 0.35039333F, 0.3459129F, 0.32715312F, 0.51513845F, 0.47677243F, 0.37836838F, 0.24600567F, 0.14278442F, 0F, 0.15486291F }, new float[] { 0.1930898F, 0.19546866F, 0.16489509F, 0.3793352F, 0.35232353F, 0.22167304F, 0.10435641F, 0.15199447F, 0.15486291F, 0F } };
        private static float[][] FullDistMat = new float[][] { new float[] { 0F, 0.15885569F, 0.11846806F, 0.35941154F, 0.31619182F, 0.19275457F, 0.23854329F, 0.3460285F, 0.35039333F, 0.1930898F, 0.26273137F, 0.3763012F, 0.46102592F, 0.32426605F, 0.30502743F, 0.2628907F, 0.36882576F, 0.41932097F, 0.36615458F, 0.37131056F, 0.28420705F, 0.33287042F, 0.43833742F, 0.5436824F, 0.55733895F, 0.5101965F, 0.5664117F, 0.5932979F, 0.36980417F, 0.47540882F, 0.40121037F, 0.55873156F, 0.5558235F, 0.54038596F, 0.48408154F, 0.4343806F, 0.41127932F, 0.3625785F, 0.34640732F, 0.2735508F, 0.45131174F, 0.5042998F, 0.41564095F, 0.41673258F, 0.45794708F, 0.4499788F, 0.65158635F, 0.549108F, 0.48688078F, 0.41171476F }, new float[] { 0.15885569F, 0F, 0.10401745F, 0.3183376F, 0.29300135F, 0.17950477F, 0.23844789F, 0.35140216F, 0.3459129F, 0.19546866F, 0.26363212F, 0.35643455F, 0.4476599F, 0.30871746F, 0.28548056F, 0.26972154F, 0.36985102F, 0.4422608F, 0.3804368F, 0.37526256F, 0.2898772F, 0.3266024F, 0.45725262F, 0.57739127F, 0.59523654F, 0.52658904F, 0.56296843F, 0.58764726F, 0.38445282F, 0.48159197F, 0.4108585F, 0.58176583F, 0.5613213F, 0.5512107F, 0.5338635F, 0.44950673F, 0.435428F, 0.34513938F, 0.3426113F, 0.27978402F, 0.425487F, 0.47557035F, 0.42080626F, 0.4287943F, 0.48337632F, 0.4643216F, 0.65207356F, 0.5682522F, 0.4994607F, 0.41343808F }, new float[] { 0.11846806F, 0.10401745F, 0F, 0.29053935F, 0.26424354F, 0.1446233F, 0.22179109F, 0.3170976F, 0.32715312F, 0.16489509F, 0.23012073F, 0.32858673F, 0.42429143F, 0.28813496F, 0.25689048F, 0.22990288F, 0.3309965F, 0.38615194F, 0.3415145F, 0.33397558F, 0.2608594F, 0.3110117F, 0.43484524F, 0.54088444F, 0.557904F, 0.48608488F, 0.54101664F, 0.55747294F, 0.3282702F, 0.42365178F, 0.36589912F, 0.5132219F, 0.49060836F, 0.48134035F, 0.4855427F, 0.40304476F, 0.38484338F, 0.31285617F, 0.30185682F, 0.2397898F, 0.4252905F, 0.47107586F, 0.38246834F, 0.3903935F, 0.43841916F, 0.4204808F, 0.6090414F, 0.52102F, 0.46054798F, 0.3926878F }, new float[] { 0.35941154F, 0.3183376F, 0.29053935F, 0F, 0.11622926F, 0.19078436F, 0.41862476F, 0.5395212F, 0.51513845F, 0.3793352F, 0.424536F, 0.5242472F, 0.58191586F, 0.46184367F, 0.47191653F, 0.40816805F, 0.5341384F, 0.5878319F, 0.5661899F, 0.5363951F, 0.4510803F, 0.49086013F, 0.58830976F, 0.7479069F, 0.78375304F, 0.67127764F, 0.71174616F, 0.74495F, 0.583806F, 0.6606702F, 0.564338F, 0.6939089F, 0.72970587F, 0.6992896F, 0.68878037F, 0.6149264F, 0.596122F, 0.5670613F, 0.55031806F, 0.47582573F, 0.6186424F, 0.6878054F, 0.59432393F, 0.61892164F, 0.6771217F, 0.6563176F, 0.86673075F, 0.73602396F, 0.6981813F, 0.6416793F }, new float[] { 0.31619182F, 0.29300135F, 0.26424354F, 0.11622926F, 0F, 0.17395239F, 0.3887386F, 0.5028363F, 0.47677243F, 0.35232353F, 0.3971733F, 0.5123851F, 0.58097476F, 0.4461111F, 0.4231475F, 0.3921735F, 0.50557387F, 0.5430025F, 0.51885027F, 0.5158443F, 0.42165405F, 0.46568137F, 0.60377663F, 0.72700226F, 0.7547927F, 0.6601766F, 0.6776536F, 0.6923089F, 0.5638043F, 0.6349744F, 0.5370666F, 0.68122244F, 0.7040821F, 0.6606515F, 0.6510927F, 0.58766365F, 0.57532674F, 0.5113881F, 0.52040213F, 0.44448632F, 0.58764726F, 0.6792515F, 0.6054575F, 0.60591453F, 0.64110136F, 0.61754364F, 0.8306879F, 0.7171168F, 0.6557126F, 0.60460794F }, new float[] { 0.19275457F, 0.17950477F, 0.1446233F, 0.19078436F, 0.17395239F, 0F, 0.27862552F, 0.37751007F, 0.37836838F, 0.22167304F, 0.28201157F, 0.39085466F, 0.46068773F, 0.3368F, 0.3048724F, 0.27952546F, 0.40376016F, 0.45142233F, 0.40136674F, 0.39205298F, 0.32209992F, 0.35778722F, 0.46233714F, 0.554315F, 0.5766805F, 0.5170708F, 0.56635785F, 0.57876885F, 0.39146703F, 0.48526415F, 0.40049106F, 0.56357694F, 0.55653304F, 0.5331768F, 0.5292138F, 0.4553817F, 0.42093766F, 0.37329447F, 0.3611235F, 0.30796605F, 0.4869545F, 0.5220627F, 0.43989173F, 0.4521233F, 0.5016894F, 0.48569277F, 0.69872564F, 0.5723464F, 0.51370007F, 0.45464468F }, new float[] { 0.23854329F, 0.23844789F, 0.22179109F, 0.41862476F, 0.3887386F, 0.27862552F, 0F, 0.24799475F, 0.24600567F, 0.10435641F, 0.22843382F, 0.30735943F, 0.41037238F, 0.26528892F, 0.27804235F, 0.23373738F, 0.3457724F, 0.43760067F, 0.34321386F, 0.34768727F, 0.2592334F, 0.30967125F, 0.41566196F, 0.51085407F, 0.556916F, 0.4929914F, 0.5072394F, 0.54771495F, 0.33662912F, 0.42662492F, 0.3546948F, 0.5433957F, 0.47879767F, 0.47286743F, 0.45711666F, 0.3569107F, 0.37705597F, 0.32093662F, 0.31877187F, 0.22724783F, 0.38891304F, 0.4305965F, 0.36137673F, 0.37537578F, 0.40531564F, 0.39151117F, 0.58171F, 0.45755735F, 0.40564638F, 0.36109638F }, new float[] { 0.3460285F, 0.35140216F, 0.3170976F, 0.5395212F, 0.5028363F, 0.37751007F, 0.24799475F, 0F, 0.14278442F, 0.15199447F, 0.33605152F, 0.41190478F, 0.5378569F, 0.37033466F, 0.3694909F, 0.33961856F, 0.41700047F, 0.5352112F, 0.45097443F, 0.4378011F, 0.35857475F, 0.40208933F, 0.49138543F, 0.5992141F, 0.6228142F, 0.54748213F, 0.5586005F, 0.5976566F, 0.4155308F, 0.5097757F, 0.4300301F, 0.60934454F, 0.50638413F, 0.52735364F, 0.4941589F, 0.43104786F, 0.43911934F, 0.39361382F, 0.394742F, 0.31184062F, 0.5007203F, 0.53019196F, 0.47598287F, 0.48118502F, 0.50724345F, 0.49534953F, 0.67830604F, 0.57722366F, 0.5275497F, 0.479757F }, new float[] { 0.35039333F, 0.3459129F, 0.32715312F, 0.51513845F, 0.47677243F, 0.37836838F, 0.24600567F, 0.14278442F, 0F, 0.15486291F, 0.3429937F, 0.41918626F, 0.5248656F, 0.37385777F, 0.37683755F, 0.3437103F, 0.4396779F, 0.53683555F, 0.44824907F, 0.44600496F, 0.3589186F, 0.4064787F, 0.50875264F, 0.6155389F, 0.64972305F, 0.57072735F, 0.59564984F, 0.6226994F, 0.43149295F, 0.5204491F, 0.43100846F, 0.6030442F, 0.5355489F, 0.53747594F, 0.5238565F, 0.4508247F, 0.45561704F, 0.41994998F, 0.41685665F, 0.32191655F, 0.4910764F, 0.5455958F, 0.46273854F, 0.48672923F, 0.49761444F, 0.4819774F, 0.64025813F, 0.5544196F, 0.5009395F, 0.46196976F }, new float[] { 0.1930898F, 0.19546866F, 0.16489509F, 0.3793352F, 0.35232353F, 0.22167304F, 0.10435641F, 0.15199447F, 0.15486291F, 0F, 0.18570045F, 0.27732646F, 0.38647595F, 0.23408519F, 0.22444732F, 0.18760812F, 0.28407985F, 0.36819175F, 0.28759345F, 0.28629357F, 0.21465328F, 0.2562351F, 0.3545522F, 0.47151121F, 0.49519825F, 0.43962097F, 0.464483F, 0.50221026F, 0.2926854F, 0.3905834F, 0.30655637F, 0.4781658F, 0.42546913F, 0.42392996F, 0.39180946F, 0.31514162F, 0.32400632F, 0.28127477F, 0.27361384F, 0.18979466F, 0.34595895F, 0.3861058F, 0.32307965F, 0.33309063F, 0.36438859F, 0.3512921F, 0.5638199F, 0.4471752F, 0.38803893F, 0.31330854F }, new float[] { 0.26273137F, 0.26363212F, 0.23012073F, 0.424536F, 0.3971733F, 0.28201157F, 0.22843382F, 0.33605152F, 0.3429937F, 0.18570045F, 0F, 0.18266223F, 0.2564468F, 0.14262424F, 0.1487881F, 0.10968599F, 0.20995347F, 0.2976045F, 0.2104139F, 0.21216123F, 0.1420387F, 0.19780047F, 0.28175268F, 0.36490807F, 0.38175532F, 0.3321736F, 0.35364112F, 0.37203413F, 0.28817174F, 0.3547162F, 0.33638456F, 0.50514066F, 0.45959577F, 0.42887083F, 0.45527083F, 0.35503933F, 0.34460986F, 0.30948052F, 0.30790865F, 0.19672517F, 0.36679298F, 0.42434448F, 0.3211028F, 0.34073716F, 0.39279202F, 0.3757932F, 0.61367106F, 0.4668442F, 0.42055562F, 0.3399258F }, new float[] { 0.3763012F, 0.35643455F, 0.32858673F, 0.5242472F, 0.5123851F, 0.39085466F, 0.30735943F, 0.41190478F, 0.41918626F, 0.27732646F, 0.18266223F, 0F, 0.14929438F, 0.050123032F, 0.24550785F, 0.19425406F, 0.30113256F, 0.37105536F, 0.30181184F, 0.2913689F, 0.22431605F, 0.28149584F, 0.36394745F, 0.45460188F, 0.47772613F, 0.4250625F, 0.43847692F, 0.48310423F, 0.38935238F, 0.4416869F, 0.40915802F, 0.5952276F, 0.535124F, 0.5085579F, 0.53372324F, 0.44484243F, 0.42967469F, 0.38860762F, 0.38312787F, 0.27717587F, 0.4881037F, 0.5554994F, 0.42348313F, 0.46077472F, 0.49832556F, 0.4903199F, 0.7454219F, 0.5799648F, 0.53492725F, 0.45202237F }, new float[] { 0.46102592F, 0.4476599F, 0.42429143F, 0.58191586F, 0.58097476F, 0.46068773F, 0.41037238F, 0.5378569F, 0.5248656F, 0.38647595F, 0.2564468F, 0.14929438F, 0F, 0.13224882F, 0.3418877F, 0.27614883F, 0.41221148F, 0.49392438F, 0.41339922F, 0.3971136F, 0.32463452F, 0.39024058F, 0.46017274F, 0.56955045F, 0.5779649F, 0.52985436F, 0.51604813F, 0.5447188F, 0.46224678F, 0.53757715F, 0.48088285F, 0.7038738F, 0.6398052F, 0.5830225F, 0.6118726F, 0.5283216F, 0.5077828F, 0.47998893F, 0.46574336F, 0.37783366F, 0.5635612F, 0.6431081F, 0.5144871F, 0.553424F, 0.6435643F, 0.6239098F, 0.8783759F, 0.68417F, 0.64232314F, 0.53555256F }, new float[] { 0.32426605F, 0.30871746F, 0.28813496F, 0.46184367F, 0.4461111F, 0.3368F, 0.26528892F, 0.37033466F, 0.37385777F, 0.23408519F, 0.14262424F, 0.050123032F, 0.13224882F, 0F, 0.20982538F, 0.16542716F, 0.26847842F, 0.3417289F, 0.26904163F, 0.26198268F, 0.18157783F, 0.24105427F, 0.32829794F, 0.40692532F, 0.4286553F, 0.38278097F, 0.39559814F, 0.4374773F, 0.34553304F, 0.41540638F, 0.3606719F, 0.56807154F, 0.49381077F, 0.46915066F, 0.48103818F, 0.39752787F, 0.37965602F, 0.34200844F, 0.34662938F, 0.23428103F, 0.43117926F, 0.48616958F, 0.37480533F, 0.4025093F, 0.4710596F, 0.45202237F, 0.67716306F, 0.5330735F, 0.48264465F, 0.3979211F }, new float[] { 0.30502743F, 0.28548056F, 0.25689048F, 0.47191653F, 0.4231475F, 0.3048724F, 0.27804235F, 0.3694909F, 0.37683755F, 0.22444732F, 0.1487881F, 0.24550785F, 0.3418877F, 0.20982538F, 0F, 0.104532965F, 0.2015173F, 0.2703626F, 0.199012F, 0.19279276F, 0.18125832F, 0.23987682F, 0.33498058F, 0.4179955F, 0.4287632F, 0.38925135F, 0.41232455F, 0.4506446F, 0.31116107F, 0.39282462F, 0.3675093F, 0.53492725F, 0.48386493F, 0.4634625F, 0.48340783F, 0.39063078F, 0.3692637F, 0.3391088F, 0.33727366F, 0.23597915F, 0.3951163F, 0.46438658F, 0.3578548F, 0.37816066F, 0.41823864F, 0.40772066F, 0.62846667F, 0.4909212F, 0.44347742F, 0.3838152F }, new float[] { 0.2628907F, 0.26972154F, 0.22990288F, 0.40816805F, 0.3921735F, 0.27952546F, 0.23373738F, 0.33961856F, 0.3437103F, 0.18760812F, 0.10968599F, 0.19425406F, 0.27614883F, 0.16542716F, 0.104532965F, 0F, 0.17148511F, 0.24672559F, 0.17104006F, 0.16757438F, 0.14848348F, 0.20530574F, 0.2885913F, 0.383657F, 0.4012599F, 0.35926437F, 0.37527117F, 0.41540414F, 0.29485926F, 0.3590887F, 0.33752248F, 0.50893193F, 0.46249956F, 0.44211513F, 0.45737636F, 0.34974572F, 0.3459234F, 0.30787966F, 0.29967082F, 0.2044469F, 0.35827708F, 0.404015F, 0.3386811F, 0.3718347F, 0.3944876F, 0.39116508F, 0.6058217F, 0.47841233F, 0.43404087F, 0.3442738F }, new float[] { 0.36882576F, 0.36985102F, 0.3309965F, 0.5341384F, 0.50557387F, 0.40376016F, 0.3457724F, 0.41700047F, 0.4396779F, 0.28407985F, 0.20995347F, 0.30113256F, 0.41221148F, 0.26847842F, 0.2015173F, 0.17148511F, 0F, 0.14800644F, 0.11478408F, 0.1142922F, 0.23451333F, 0.2652911F, 0.37154597F, 0.4403593F, 0.45115504F, 0.42472723F, 0.43239307F, 0.47853312F, 0.39584816F, 0.47823176F, 0.4265003F, 0.5963875F, 0.5451948F, 0.53099275F, 0.5474641F, 0.42874762F, 0.45113492F, 0.407657F, 0.41129383F, 0.29319882F, 0.47124097F, 0.52740014F, 0.38548416F, 0.4344918F, 0.50149596F, 0.485974F, 0.6995195F, 0.5817215F, 0.5391749F, 0.45540267F }, new float[] { 0.41932097F, 0.4422608F, 0.38615194F, 0.5878319F, 0.5430025F, 0.45142233F, 0.43760067F, 0.5352112F, 0.53683555F, 0.36819175F, 0.2976045F, 0.37105536F, 0.49392438F, 0.3417289F, 0.2703626F, 0.24672559F, 0.14800644F, 0F, 0.1938284F, 0.1799716F, 0.31296086F, 0.3601382F, 0.45562297F, 0.5311963F, 0.5311963F, 0.5252509F, 0.5280167F, 0.5512016F, 0.44976988F, 0.5486442F, 0.48788482F, 0.64332026F, 0.6083095F, 0.5966107F, 0.57792634F, 0.5008498F, 0.5183668F, 0.47982132F, 0.47249207F, 0.38135222F, 0.55938226F, 0.61357504F, 0.46707636F, 0.4828889F, 0.57712233F, 0.5517406F, 0.787815F, 0.6735925F, 0.60245484F, 0.5457219F }, new float[] { 0.36615458F, 0.3804368F, 0.3415145F, 0.5661899F, 0.51885027F, 0.40136674F, 0.34321386F, 0.45097443F, 0.44824907F, 0.28759345F, 0.2104139F, 0.30181184F, 0.41339922F, 0.26904163F, 0.199012F, 0.17104006F, 0.11478408F, 0.1938284F, 0F, 0.09838277F, 0.24035971F, 0.27743477F, 0.38525677F, 0.45229667F, 0.47870764F, 0.4508308F, 0.46124408F, 0.51408845F, 0.37988546F, 0.46870944F, 0.4349041F, 0.5980642F, 0.53813994F, 0.5239756F, 0.54073274F, 0.4445312F, 0.44883886F, 0.40118834F, 0.41186446F, 0.30289167F, 0.49142843F, 0.5459181F, 0.42064697F, 0.46465555F, 0.5174052F, 0.5016534F, 0.7038697F, 0.5972756F, 0.5389195F, 0.4592643F }, new float[] { 0.37131056F, 0.37526256F, 0.33397558F, 0.5363951F, 0.5158443F, 0.39205298F, 0.34768727F, 0.4378011F, 0.44600496F, 0.28629357F, 0.21216123F, 0.2913689F, 0.3971136F, 0.26198268F, 0.19279276F, 0.16757438F, 0.1142922F, 0.1799716F, 0.09838277F, 0F, 0.23372233F, 0.28480706F, 0.3829407F, 0.46462432F, 0.4798119F, 0.43381187F, 0.4700997F, 0.51933277F, 0.3743862F, 0.48045275F, 0.42871144F, 0.5804612F, 0.5517195F, 0.53331536F, 0.5307024F, 0.4462535F, 0.44579256F, 0.39454427F, 0.3952739F, 0.29515314F, 0.48451984F, 0.53788686F, 0.4183713F, 0.45826F, 0.5185444F, 0.4988999F, 0.72043836F, 0.61223966F, 0.53599083F, 0.47174054F }, new float[] { 0.28420705F, 0.2898772F, 0.2608594F, 0.4510803F, 0.42165405F, 0.32209992F, 0.2592334F, 0.35857475F, 0.3589186F, 0.21465328F, 0.1420387F, 0.22431605F, 0.32463452F, 0.18157783F, 0.18125832F, 0.14848348F, 0.23451333F, 0.31296086F, 0.24035971F, 0.23372233F, 0F, 0.10093987F, 0.1762584F, 0.30217993F, 0.31773147F, 0.26664647F, 0.27495563F, 0.31179172F, 0.31202435F, 0.3940158F, 0.35499838F, 0.53671885F, 0.4698479F, 0.45329475F, 0.47669634F, 0.3707988F, 0.3770065F, 0.33367568F, 0.33184317F, 0.22012737F, 0.37908152F, 0.44213712F, 0.3520442F, 0.3724009F, 0.41941804F, 0.40188614F, 0.59384495F, 0.48028183F, 0.42643487F, 0.37808564F }, new float[] { 0.33287042F, 0.3266024F, 0.3110117F, 0.49086013F, 0.46568137F, 0.35778722F, 0.30967125F, 0.40208933F, 0.4064787F, 0.2562351F, 0.19780047F, 0.28149584F, 0.39024058F, 0.24105427F, 0.23987682F, 0.20530574F, 0.2652911F, 0.3601382F, 0.27743477F, 0.28480706F, 0.10093987F, 0F, 0.18128349F, 0.27507126F, 0.28420928F, 0.24662839F, 0.25806186F, 0.2999202F, 0.3797265F, 0.46793F, 0.42392895F, 0.60275906F, 0.5183668F, 0.49595627F, 0.53645915F, 0.4445346F, 0.4451527F, 0.39781266F, 0.38451615F, 0.2790422F, 0.42432764F, 0.47829738F, 0.39947274F, 0.43153036F, 0.48195112F, 0.4629923F, 0.6549729F, 0.536212F, 0.48584178F, 0.4302476F }, new float[] { 0.43833742F, 0.45725262F, 0.43484524F, 0.58830976F, 0.60377663F, 0.46233714F, 0.41566196F, 0.49138543F, 0.50875264F, 0.3545522F, 0.28175268F, 0.36394745F, 0.46017274F, 0.32829794F, 0.33498058F, 0.2885913F, 0.37154597F, 0.45562297F, 0.38525677F, 0.3829407F, 0.1762584F, 0.18128349F, 0F, 0.2377586F, 0.26073235F, 0.21386348F, 0.21581008F, 0.26134813F, 0.4671189F, 0.55151504F, 0.5217154F, 0.67212737F, 0.60593057F, 0.5725435F, 0.6273214F, 0.5158079F, 0.53375614F, 0.50978214F, 0.5097507F, 0.3797044F, 0.54707587F, 0.6014797F, 0.50950897F, 0.55455947F, 0.59556806F, 0.5736917F, 0.8078781F, 0.6646598F, 0.6145176F, 0.5610694F }, new float[] { 0.5436824F, 0.57739127F, 0.54088444F, 0.7479069F, 0.72700226F, 0.554315F, 0.51085407F, 0.5992141F, 0.6155389F, 0.47151121F, 0.36490807F, 0.45460188F, 0.56955045F, 0.40692532F, 0.4179955F, 0.383657F, 0.4403593F, 0.5311963F, 0.45229667F, 0.46462432F, 0.30217993F, 0.27507126F, 0.2377586F, 0F, 0.056512076F, 0.11180396F, 0.24362019F, 0.2853569F, 0.5981289F, 0.63758457F, 0.62104756F, 0.78076154F, 0.7090243F, 0.67485124F, 0.749812F, 0.6622577F, 0.677734F, 0.61628026F, 0.6203155F, 0.46126467F, 0.6243046F, 0.6845077F, 0.6004413F, 0.610245F, 0.71615386F, 0.6957817F, 0.91361237F, 0.7470401F, 0.68536896F, 0.6860436F }, new float[] { 0.55733895F, 0.59523654F, 0.557904F, 0.78375304F, 0.7547927F, 0.5766805F, 0.556916F, 0.6228142F, 0.64972305F, 0.49519825F, 0.38175532F, 0.47772613F, 0.5779649F, 0.4286553F, 0.4287632F, 0.4012599F, 0.45115504F, 0.5311963F, 0.47870764F, 0.4798119F, 0.31773147F, 0.28420928F, 0.26073235F, 0.056512076F, 0F, 0.14570408F, 0.264371F, 0.3012042F, 0.630848F, 0.6736532F, 0.64510745F, 0.8226441F, 0.7255689F, 0.7116472F, 0.7669567F, 0.6982726F, 0.71416515F, 0.65324396F, 0.64864486F, 0.48025057F, 0.6488385F, 0.7183802F, 0.6234181F, 0.6145004F, 0.7214213F, 0.7008841F, 0.90474916F, 0.74162465F, 0.7001153F, 0.7136749F }, new float[] { 0.5101965F, 0.52658904F, 0.48608488F, 0.67127764F, 0.6601766F, 0.5170708F, 0.4929914F, 0.54748213F, 0.57072735F, 0.43962097F, 0.3321736F, 0.4250625F, 0.52985436F, 0.38278097F, 0.38925135F, 0.35926437F, 0.42472723F, 0.5252509F, 0.4508308F, 0.43381187F, 0.26664647F, 0.24662839F, 0.21386348F, 0.11180396F, 0.14570408F, 0F, 0.22225699F, 0.2621459F, 0.5681187F, 0.6377992F, 0.5852597F, 0.72897F, 0.68323666F, 0.6266215F, 0.72286683F, 0.6060658F, 0.6410921F, 0.59289825F, 0.5930864F, 0.45585513F, 0.6295906F, 0.6838556F, 0.6054575F, 0.5843794F, 0.72161186F, 0.70091856F, 0.92432255F, 0.7416139F, 0.7114063F, 0.65129346F }, new float[] { 0.5664117F, 0.56296843F, 0.54101664F, 0.71174616F, 0.6776536F, 0.56635785F, 0.5072394F, 0.5586005F, 0.59564984F, 0.464483F, 0.35364112F, 0.43847692F, 0.51604813F, 0.39559814F, 0.41232455F, 0.37527117F, 0.43239307F, 0.5280167F, 0.46124408F, 0.4700997F, 0.27495563F, 0.25806186F, 0.21581008F, 0.24362019F, 0.264371F, 0.22225699F, 0F, 0.056644946F, 0.56203145F, 0.625218F, 0.6105179F, 0.75902426F, 0.6560797F, 0.6293943F, 0.72089875F, 0.61348253F, 0.6289349F, 0.5779903F, 0.5740237F, 0.4731406F, 0.6036384F, 0.6394193F, 0.57992727F, 0.6174641F, 0.67307204F, 0.6581962F, 0.83408F, 0.69058985F, 0.66819394F, 0.6436483F }, new float[] { 0.5932979F, 0.58764726F, 0.55747294F, 0.74495F, 0.6923089F, 0.57876885F, 0.54771495F, 0.5976566F, 0.6226994F, 0.50221026F, 0.37203413F, 0.48310423F, 0.5447188F, 0.4374773F, 0.4506446F, 0.41540414F, 0.47853312F, 0.5512016F, 0.51408845F, 0.51933277F, 0.31179172F, 0.2999202F, 0.26134813F, 0.2853569F, 0.3012042F, 0.2621459F, 0.056644946F, 0F, 0.5974199F, 0.6689694F, 0.648432F, 0.7820694F, 0.70294416F, 0.67331934F, 0.7661718F, 0.6618556F, 0.6723276F, 0.6223461F, 0.60418665F, 0.514822F, 0.64989686F, 0.69077504F, 0.60554487F, 0.63554186F, 0.724548F, 0.697765F, 0.8916668F, 0.74030876F, 0.7134965F, 0.6926629F }, new float[] { 0.36980417F, 0.38445282F, 0.3282702F, 0.583806F, 0.5638043F, 0.39146703F, 0.33662912F, 0.4155308F, 0.43149295F, 0.2926854F, 0.28817174F, 0.38935238F, 0.46224678F, 0.34553304F, 0.31116107F, 0.29485926F, 0.39584816F, 0.44976988F, 0.37988546F, 0.3743862F, 0.31202435F, 0.3797265F, 0.4671189F, 0.5981289F, 0.630848F, 0.5681187F, 0.56203145F, 0.5974199F, 0F, 0.11863892F, 0.14434229F, 0.3102725F, 0.27180162F, 0.26809478F, 0.25130218F, 0.15926704F, 0.16013294F, 0.26516864F, 0.24101445F, 0.17556748F, 0.35168707F, 0.39310732F, 0.32528415F, 0.38194627F, 0.4055077F, 0.3845777F, 0.6001901F, 0.484136F, 0.4263461F, 0.34446448F }, new float[] { 0.47540882F, 0.48159197F, 0.42365178F, 0.6606702F, 0.6349744F, 0.48526415F, 0.42662492F, 0.5097757F, 0.5204491F, 0.3905834F, 0.3547162F, 0.4416869F, 0.53757715F, 0.41540638F, 0.39282462F, 0.3590887F, 0.47823176F, 0.5486442F, 0.46870944F, 0.48045275F, 0.3940158F, 0.46793F, 0.55151504F, 0.63758457F, 0.6736532F, 0.6377992F, 0.625218F, 0.6689694F, 0.11863892F, 0F, 0.2236935F, 0.3926161F, 0.34974045F, 0.34169874F, 0.32883656F, 0.21752399F, 0.23607376F, 0.35196742F, 0.3368483F, 0.2525715F, 0.42868745F, 0.48442256F, 0.3987526F, 0.46249956F, 0.46487737F, 0.4496343F, 0.6987009F, 0.5504459F, 0.4937758F, 0.41274226F }, new float[] { 0.40121037F, 0.4108585F, 0.36589912F, 0.564338F, 0.5370666F, 0.40049106F, 0.3546948F, 0.4300301F, 0.43100846F, 0.30655637F, 0.33638456F, 0.40915802F, 0.48088285F, 0.3606719F, 0.3675093F, 0.33752248F, 0.4265003F, 0.48788482F, 0.4349041F, 0.42871144F, 0.35499838F, 0.42392895F, 0.5217154F, 0.62104756F, 0.64510745F, 0.5852597F, 0.6105179F, 0.648432F, 0.14434229F, 0.2236935F, 0F, 0.22727473F, 0.19527599F, 0.18413956F, 0.13614161F, 0.12405179F, 0.12974016F, 0.3025699F, 0.29808882F, 0.21081501F, 0.36348906F, 0.41010708F, 0.352609F, 0.3735932F, 0.42149106F, 0.4001292F, 0.63716376F, 0.50367796F, 0.45498112F, 0.36594144F }, new float[] { 0.55873156F, 0.58176583F, 0.5132219F, 0.6939089F, 0.68122244F, 0.56357694F, 0.5433957F, 0.60934454F, 0.6030442F, 0.4781658F, 0.50514066F, 0.5952276F, 0.7038738F, 0.56807154F, 0.53492725F, 0.50893193F, 0.5963875F, 0.64332026F, 0.5980642F, 0.5804612F, 0.53671885F, 0.60275906F, 0.67212737F, 0.78076154F, 0.8226441F, 0.72897F, 0.75902426F, 0.7820694F, 0.3102725F, 0.3926161F, 0.22727473F, 0F, 0.22484905F, 0.21897033F, 0.31546605F, 0.3058057F, 0.29872796F, 0.5029553F, 0.48813602F, 0.36979142F, 0.5276624F, 0.5648034F, 0.52569956F, 0.55248964F, 0.61823803F, 0.5995338F, 0.8616347F, 0.707762F, 0.6540199F, 0.5508734F }, new float[] { 0.5558235F, 0.5613213F, 0.49060836F, 0.72970587F, 0.7040821F, 0.55653304F, 0.47879767F, 0.50638413F, 0.5355489F, 0.42546913F, 0.45959577F, 0.535124F, 0.6398052F, 0.49381077F, 0.48386493F, 0.46249956F, 0.5451948F, 0.6083095F, 0.53813994F, 0.5517195F, 0.4698479F, 0.5183668F, 0.60593057F, 0.7090243F, 0.7255689F, 0.68323666F, 0.6560797F, 0.70294416F, 0.27180162F, 0.34974045F, 0.19527599F, 0.22484905F, 0F, 0.126757F, 0.27051973F, 0.28220135F, 0.2754105F, 0.44583383F, 0.44702676F, 0.3442738F, 0.51218057F, 0.54774636F, 0.48274943F, 0.52876705F, 0.5312693F, 0.52296597F, 0.76509076F, 0.64168507F, 0.5744875F, 0.47494802F }, new float[] { 0.54038596F, 0.5512107F, 0.48134035F, 0.6992896F, 0.6606515F, 0.5331768F, 0.47286743F, 0.52735364F, 0.53747594F, 0.42392996F, 0.42887083F, 0.5085579F, 0.5830225F, 0.46915066F, 0.4634625F, 0.44211513F, 0.53099275F, 0.5966107F, 0.5239756F, 0.53331536F, 0.45329475F, 0.49595627F, 0.5725435F, 0.67485124F, 0.7116472F, 0.6266215F, 0.6293943F, 0.67331934F, 0.26809478F, 0.34169874F, 0.18413956F, 0.21897033F, 0.126757F, 0F, 0.26684794F, 0.2670643F, 0.2660824F, 0.42985016F, 0.42382577F, 0.33378986F, 0.47884312F, 0.5369445F, 0.47747925F, 0.5189008F, 0.54233825F, 0.5340583F, 0.7709968F, 0.6403892F, 0.5964451F, 0.48146483F }, new float[] { 0.48408154F, 0.5338635F, 0.4855427F, 0.68878037F, 0.6510927F, 0.5292138F, 0.45711666F, 0.4941589F, 0.5238565F, 0.39180946F, 0.45527083F, 0.53372324F, 0.6118726F, 0.48103818F, 0.48340783F, 0.45737636F, 0.5474641F, 0.57792634F, 0.54073274F, 0.5307024F, 0.47669634F, 0.53645915F, 0.6273214F, 0.749812F, 0.7669567F, 0.72286683F, 0.72089875F, 0.7661718F, 0.25130218F, 0.32883656F, 0.13614161F, 0.31546605F, 0.27051973F, 0.26684794F, 0F, 0.2190329F, 0.21768658F, 0.39429742F, 0.3887721F, 0.30588832F, 0.47884312F, 0.5324951F, 0.46209344F, 0.46722585F, 0.5215173F, 0.49715626F, 0.7858538F, 0.6266675F, 0.56454486F, 0.48529682F }, new float[] { 0.4343806F, 0.44950673F, 0.40304476F, 0.6149264F, 0.58766365F, 0.4553817F, 0.3569107F, 0.43104786F, 0.4508247F, 0.31514162F, 0.35503933F, 0.44484243F, 0.5283216F, 0.39752787F, 0.39063078F, 0.34974572F, 0.42874762F, 0.5008498F, 0.4445312F, 0.4462535F, 0.3707988F, 0.4445346F, 0.5158079F, 0.6622577F, 0.6982726F, 0.6060658F, 0.61348253F, 0.6618556F, 0.15926704F, 0.21752399F, 0.12405179F, 0.3058057F, 0.28220135F, 0.2670643F, 0.2190329F, 0F, 0.1319843F, 0.3299508F, 0.32839945F, 0.22673821F, 0.37946147F, 0.40556145F, 0.37504452F, 0.4107066F, 0.44236574F, 0.42752516F, 0.6591648F, 0.5063849F, 0.47672808F, 0.3922493F }, new float[] { 0.41127932F, 0.435428F, 0.38484338F, 0.596122F, 0.57532674F, 0.42093766F, 0.37705597F, 0.43911934F, 0.45561704F, 0.32400632F, 0.34460986F, 0.42967469F, 0.5077828F, 0.37965602F, 0.3692637F, 0.3459234F, 0.45113492F, 0.5183668F, 0.44883886F, 0.44579256F, 0.3770065F, 0.4451527F, 0.53375614F, 0.677734F, 0.71416515F, 0.6410921F, 0.6289349F, 0.6723276F, 0.16013294F, 0.23607376F, 0.12974016F, 0.29872796F, 0.2754105F, 0.2660824F, 0.21768658F, 0.1319843F, 0F, 0.31976455F, 0.32768062F, 0.22265464F, 0.37900716F, 0.41768298F, 0.36446804F, 0.38937932F, 0.42378712F, 0.4023277F, 0.64104116F, 0.49384844F, 0.46182826F, 0.3848642F }, new float[] { 0.3625785F, 0.34513938F, 0.31285617F, 0.5670613F, 0.5113881F, 0.37329447F, 0.32093662F, 0.39361382F, 0.41994998F, 0.28127477F, 0.30948052F, 0.38860762F, 0.47998893F, 0.34200844F, 0.3391088F, 0.30787966F, 0.407657F, 0.47982132F, 0.40118834F, 0.39454427F, 0.33367568F, 0.39781266F, 0.50978214F, 0.61628026F, 0.65324396F, 0.59289825F, 0.5779903F, 0.6223461F, 0.26516864F, 0.35196742F, 0.3025699F, 0.5029553F, 0.44583383F, 0.42985016F, 0.39429742F, 0.3299508F, 0.31976455F, 0F, 0.08388664F, 0.18418291F, 0.38139364F, 0.41058713F, 0.35719287F, 0.38112384F, 0.4110242F, 0.39028722F, 0.65358853F, 0.48704445F, 0.42915004F, 0.36034748F }, new float[] { 0.34640732F, 0.3426113F, 0.30185682F, 0.55031806F, 0.52040213F, 0.3611235F, 0.31877187F, 0.394742F, 0.41685665F, 0.27361384F, 0.30790865F, 0.38312787F, 0.46574336F, 0.34662938F, 0.33727366F, 0.29967082F, 0.41129383F, 0.47249207F, 0.41186446F, 0.3952739F, 0.33184317F, 0.38451615F, 0.5097507F, 0.6203155F, 0.64864486F, 0.5930864F, 0.5740237F, 0.60418665F, 0.24101445F, 0.3368483F, 0.29808882F, 0.48813602F, 0.44702676F, 0.42382577F, 0.3887721F, 0.32839945F, 0.32768062F, 0.08388664F, 0F, 0.17325844F, 0.35921282F, 0.38994828F, 0.33898887F, 0.36921415F, 0.41967526F, 0.39864993F, 0.6302899F, 0.49121964F, 0.43004784F, 0.35508865F }, new float[] { 0.2735508F, 0.27978402F, 0.2397898F, 0.47582573F, 0.44448632F, 0.30796605F, 0.22724783F, 0.31184062F, 0.32191655F, 0.18979466F, 0.19672517F, 0.27717587F, 0.37783366F, 0.23428103F, 0.23597915F, 0.2044469F, 0.29319882F, 0.38135222F, 0.30289167F, 0.29515314F, 0.22012737F, 0.2790422F, 0.3797044F, 0.46126467F, 0.48025057F, 0.45585513F, 0.4731406F, 0.514822F, 0.17556748F, 0.2525715F, 0.21081501F, 0.36979142F, 0.3442738F, 0.33378986F, 0.30588832F, 0.22673821F, 0.22265464F, 0.18418291F, 0.17325844F, 0F, 0.26017037F, 0.30672362F, 0.226122F, 0.25750926F, 0.29742953F, 0.2796496F, 0.4868947F, 0.36119932F, 0.30973414F, 0.24272586F }, new float[] { 0.45131174F, 0.425487F, 0.4252905F, 0.6186424F, 0.58764726F, 0.4869545F, 0.38891304F, 0.5007203F, 0.4910764F, 0.34595895F, 0.36679298F, 0.4881037F, 0.5635612F, 0.43117926F, 0.3951163F, 0.35827708F, 0.47124097F, 0.55938226F, 0.49142843F, 0.48451984F, 0.37908152F, 0.42432764F, 0.54707587F, 0.6243046F, 0.6488385F, 0.6295906F, 0.6036384F, 0.64989686F, 0.35168707F, 0.42868745F, 0.36348906F, 0.5276624F, 0.51218057F, 0.47884312F, 0.47884312F, 0.37946147F, 0.37900716F, 0.38139364F, 0.35921282F, 0.26017037F, 0F, 0.07375704F, 0.173635F, 0.22942902F, 0.32869118F, 0.30409962F, 0.5161774F, 0.41313997F, 0.351757F, 0.25438976F }, new float[] { 0.5042998F, 0.47557035F, 0.47107586F, 0.6878054F, 0.6792515F, 0.5220627F, 0.4305965F, 0.53019196F, 0.5455958F, 0.3861058F, 0.42434448F, 0.5554994F, 0.6431081F, 0.48616958F, 0.46438658F, 0.404015F, 0.52740014F, 0.61357504F, 0.5459181F, 0.53788686F, 0.44213712F, 0.47829738F, 0.6014797F, 0.6845077F, 0.7183802F, 0.6838556F, 0.6394193F, 0.69077504F, 0.39310732F, 0.48442256F, 0.41010708F, 0.5648034F, 0.54774636F, 0.5369445F, 0.5324951F, 0.40556145F, 0.41768298F, 0.41058713F, 0.38994828F, 0.30672362F, 0.07375704F, 0F, 0.1986247F, 0.24812491F, 0.36661643F, 0.34604284F, 0.55990076F, 0.4526494F, 0.395286F, 0.2813602F }, new float[] { 0.41564095F, 0.42080626F, 0.38246834F, 0.59432393F, 0.6054575F, 0.43989173F, 0.36137673F, 0.47598287F, 0.46273854F, 0.32307965F, 0.3211028F, 0.42348313F, 0.5144871F, 0.37480533F, 0.3578548F, 0.3386811F, 0.38548416F, 0.46707636F, 0.42064697F, 0.4183713F, 0.3520442F, 0.39947274F, 0.50950897F, 0.6004413F, 0.6234181F, 0.6054575F, 0.57992727F, 0.60554487F, 0.32528415F, 0.3987526F, 0.352609F, 0.52569956F, 0.48274943F, 0.47747925F, 0.46209344F, 0.37504452F, 0.36446804F, 0.35719287F, 0.33898887F, 0.226122F, 0.173635F, 0.1986247F, 0F, 0.1173798F, 0.27967447F, 0.2595107F, 0.47202408F, 0.36442798F, 0.30722994F, 0.22606058F }, new float[] { 0.41673258F, 0.4287943F, 0.3903935F, 0.61892164F, 0.60591453F, 0.4521233F, 0.37537578F, 0.48118502F, 0.48672923F, 0.33309063F, 0.34073716F, 0.46077472F, 0.553424F, 0.4025093F, 0.37816066F, 0.3718347F, 0.4344918F, 0.4828889F, 0.46465555F, 0.45826F, 0.3724009F, 0.43153036F, 0.55455947F, 0.610245F, 0.6145004F, 0.5843794F, 0.6174641F, 0.63554186F, 0.38194627F, 0.46249956F, 0.3735932F, 0.55248964F, 0.52876705F, 0.5189008F, 0.46722585F, 0.4107066F, 0.38937932F, 0.38112384F, 0.36921415F, 0.25750926F, 0.22942902F, 0.24812491F, 0.1173798F, 0F, 0.32880744F, 0.3041904F, 0.5004708F, 0.4105393F, 0.3487629F, 0.2715834F }, new float[] { 0.45794708F, 0.48337632F, 0.43841916F, 0.6771217F, 0.64110136F, 0.5016894F, 0.40531564F, 0.50724345F, 0.49761444F, 0.36438859F, 0.39279202F, 0.49832556F, 0.6435643F, 0.4710596F, 0.41823864F, 0.3944876F, 0.50149596F, 0.57712233F, 0.5174052F, 0.5185444F, 0.41941804F, 0.48195112F, 0.59556806F, 0.71615386F, 0.7214213F, 0.72161186F, 0.67307204F, 0.724548F, 0.4055077F, 0.46487737F, 0.42149106F, 0.61823803F, 0.5312693F, 0.54233825F, 0.5215173F, 0.44236574F, 0.42378712F, 0.4110242F, 0.41967526F, 0.29742953F, 0.32869118F, 0.36661643F, 0.27967447F, 0.32880744F, 0F, 0.02229271F, 0.28047484F, 0.19329186F, 0.14038073F, 0.21176992F }, new float[] { 0.4499788F, 0.4643216F, 0.4204808F, 0.6563176F, 0.61754364F, 0.48569277F, 0.39151117F, 0.49534953F, 0.4819774F, 0.3512921F, 0.3757932F, 0.4903199F, 0.6239098F, 0.45202237F, 0.40772066F, 0.39116508F, 0.485974F, 0.5517406F, 0.5016534F, 0.4988999F, 0.40188614F, 0.4629923F, 0.5736917F, 0.6957817F, 0.7008841F, 0.70091856F, 0.6581962F, 0.697765F, 0.3845777F, 0.4496343F, 0.4001292F, 0.5995338F, 0.52296597F, 0.5340583F, 0.49715626F, 0.42752516F, 0.4023277F, 0.39028722F, 0.39864993F, 0.2796496F, 0.30409962F, 0.34604284F, 0.2595107F, 0.3041904F, 0.02229271F, 0F, 0.2604139F, 0.17281562F, 0.11900885F, 0.1958906F }, new float[] { 0.65158635F, 0.65207356F, 0.6090414F, 0.86673075F, 0.8306879F, 0.69872564F, 0.58171F, 0.67830604F, 0.64025813F, 0.5638199F, 0.61367106F, 0.7454219F, 0.8783759F, 0.67716306F, 0.62846667F, 0.6058217F, 0.6995195F, 0.787815F, 0.7038697F, 0.72043836F, 0.59384495F, 0.6549729F, 0.8078781F, 0.91361237F, 0.90474916F, 0.92432255F, 0.83408F, 0.8916668F, 0.6001901F, 0.6987009F, 0.63716376F, 0.8616347F, 0.76509076F, 0.7709968F, 0.7858538F, 0.6591648F, 0.64104116F, 0.65358853F, 0.6302899F, 0.4868947F, 0.5161774F, 0.55990076F, 0.47202408F, 0.5004708F, 0.28047484F, 0.2604139F, 0F, 0.13525759F, 0.17728645F, 0.38749728F }, new float[] { 0.549108F, 0.5682522F, 0.52102F, 0.73602396F, 0.7171168F, 0.5723464F, 0.45755735F, 0.57722366F, 0.5544196F, 0.4471752F, 0.4668442F, 0.5799648F, 0.68417F, 0.5330735F, 0.4909212F, 0.47841233F, 0.5817215F, 0.6735925F, 0.5972756F, 0.61223966F, 0.48028183F, 0.536212F, 0.6646598F, 0.7470401F, 0.74162465F, 0.7416139F, 0.69058985F, 0.74030876F, 0.484136F, 0.5504459F, 0.50367796F, 0.707762F, 0.64168507F, 0.6403892F, 0.6266675F, 0.5063849F, 0.49384844F, 0.48704445F, 0.49121964F, 0.36119932F, 0.41313997F, 0.4526494F, 0.36442798F, 0.4105393F, 0.19329186F, 0.17281562F, 0.13525759F, 0F, 0.09361646F, 0.3059686F }, new float[] { 0.48688078F, 0.4994607F, 0.46054798F, 0.6981813F, 0.6557126F, 0.51370007F, 0.40564638F, 0.5275497F, 0.5009395F, 0.38803893F, 0.42055562F, 0.53492725F, 0.64232314F, 0.48264465F, 0.44347742F, 0.43404087F, 0.5391749F, 0.60245484F, 0.5389195F, 0.53599083F, 0.42643487F, 0.48584178F, 0.6145176F, 0.68536896F, 0.7001153F, 0.7114063F, 0.66819394F, 0.7134965F, 0.4263461F, 0.4937758F, 0.45498112F, 0.6540199F, 0.5744875F, 0.5964451F, 0.56454486F, 0.47672808F, 0.46182826F, 0.42915004F, 0.43004784F, 0.30973414F, 0.351757F, 0.395286F, 0.30722994F, 0.3487629F, 0.14038073F, 0.11900885F, 0.17728645F, 0.09361646F, 0F, 0.24724437F }, new float[] { 0.41171476F, 0.41343808F, 0.3926878F, 0.6416793F, 0.60460794F, 0.45464468F, 0.36109638F, 0.479757F, 0.46196976F, 0.31330854F, 0.3399258F, 0.45202237F, 0.53555256F, 0.3979211F, 0.3838152F, 0.3442738F, 0.45540267F, 0.5457219F, 0.4592643F, 0.47174054F, 0.37808564F, 0.4302476F, 0.5610694F, 0.6860436F, 0.7136749F, 0.65129346F, 0.6436483F, 0.6926629F, 0.34446448F, 0.41274226F, 0.36594144F, 0.5508734F, 0.47494802F, 0.48146483F, 0.48529682F, 0.3922493F, 0.3848642F, 0.36034748F, 0.35508865F, 0.24272586F, 0.25438976F, 0.2813602F, 0.22606058F, 0.2715834F, 0.21176992F, 0.1958906F, 0.38749728F, 0.3059686F, 0.24724437F, 0F } };
        private static float[][] FullDistMatShort = new float[][] { new float[] { 0F, 0.23927818F, 0.23927818F, 0.6577723F, 0.83105916F, 0.23927818F, 0.23927818F, 0.40741017F, 0.40741017F, 0.23927818F, 0.40741017F, 0.6577723F, 0.6577723F, 0.6577723F, 0.40741017F, 0.40741017F, 0.40741017F, 0.6577723F, 0.40741017F, 0.6577723F, 0.40741017F, 0.38311923F, 0.38311923F, 0.5756463F, 0.5858518F, 0.5756463F, 0.38311923F, 0.38311923F, 0.40741017F, 0.86050487F, 0.5815754F, 0.5198604F, 0.5815754F, 2.7725887F, 0.31712782F, 0.5815754F, 0.5815754F, 0.23412336F, 0.23927818F, 0.38311923F, 0.5756463F, 0.6577723F, 0.40741017F, 2.7725887F, 0.23412336F, 0.23412336F, 0.5756463F, 0.5756463F, 0.23412336F, 0.40741017F }, new float[] { 0.23927818F, 0F, -0F, 0.23927818F, 0.4023595F, -0F, 0.111571774F, 0.10846615F, 0.10846615F, -0F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.25541282F, 0.111571774F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.111571774F, 0.10846615F, 0.38311923F, 0.13868621F, 0.31712782F, 0.30692235F, 0.5815754F, 0.31712782F, 0.13868621F, 0.13868621F, 0.10846615F, -0F, 0.23927818F, 0.23412336F, 0.23927818F, 0.10846615F, 0.40741017F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.23927818F, -0F, 0F, 0.23927818F, 0.4023595F, -0F, 0.111571774F, 0.10846615F, 0.10846615F, -0F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.25541282F, 0.111571774F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.111571774F, 0.10846615F, 0.38311923F, 0.13868621F, 0.31712782F, 0.30692235F, 0.5815754F, 0.31712782F, 0.13868621F, 0.13868621F, 0.10846615F, -0F, 0.23927818F, 0.23412336F, 0.23927818F, 0.10846615F, 0.40741017F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0F, 0.23412336F, 0.23927818F, 0.38311923F, 0.40741017F, 0.40741017F, 0.23927818F, 0.40741017F, 0.6577723F, 0.6577723F, 0.6577723F, 0.40741017F, 0.40741017F, 0.40741017F, 0.6577723F, 0.40741017F, 0.38311923F, 0.40741017F, 0.5858518F, 0.38311923F, 0.5756463F, 0.86050487F, 0.5756463F, 0.38311923F, 0.38311923F, 0.40741017F, 0.86050487F, 0.31712782F, 0.5815754F, 0.5198604F, 2.7725887F, 0.5815754F, 0.31712782F, 0.31712782F, 0.40741017F, 0.23927818F, 0.23927818F, 0.10846615F, 0.25541282F, 0.10846615F, 0.10846615F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.83105916F, 0.4023595F, 0.4023595F, 0.23412336F, 0F, 0.4023595F, 0.65777236F, 0.5858518F, 0.38311923F, 0.4023595F, 0.5858518F, 0.83105916F, 0.83105916F, 0.83105916F, 0.5858518F, 0.5858518F, 0.5858518F, 0.83105916F, 0.5858518F, 0.65777236F, 0.5858518F, 1.2070785F, 0.65777236F, 0.93242544F, 1.3803654F, 0.93242544F, 0.65777236F, 0.65777236F, 0.5858518F, 1.3803654F, 0.56233513F, 0.866434F, 1.1116413F, 1.3862944F, 0.866434F, 0.56233513F, 0.56233513F, 0.5858518F, 0.4023595F, 0.5756463F, 0.38311923F, 0.4023595F, 0.38311923F, 0.38311923F, 0.86050487F, 0.86050487F, 2.7725887F, 2.7725887F, 0.86050487F, 0.86050487F }, new float[] { 0.23927818F, -0F, -0F, 0.23927818F, 0.4023595F, 0F, 0.111571774F, 0.10846615F, 0.10846615F, -0F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.25541282F, 0.111571774F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.111571774F, 0.10846615F, 0.38311923F, 0.13868621F, 0.31712782F, 0.30692235F, 0.5815754F, 0.31712782F, 0.13868621F, 0.13868621F, 0.10846615F, -0F, 0.23927818F, 0.23412336F, 0.23927818F, 0.10846615F, 0.40741017F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.23927818F, 0.111571774F, 0.111571774F, 0.38311923F, 0.65777236F, 0.111571774F, 0F, 0.23412336F, 0.23412336F, 0.111571774F, 0.23412336F, 0.38311923F, 0.38311923F, 0.38311923F, 0.23412336F, 0.23412336F, 0.23412336F, 0.38311923F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.25541282F, 0.4023595F, 0.5858518F, 0.4023595F, 0.25541282F, 0.25541282F, 0.23412336F, 0.5858518F, 0.30692235F, 0.5198604F, 0.56233513F, 0.8369882F, 0.5198604F, 0.30692235F, 0.30692235F, 0.10846615F, 0.111571774F, 0.38311923F, 0.4023595F, 0.38311923F, 0.23412336F, 0.5756463F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0F, 0.23927818F, 0.10846615F, 0.23927818F, 0.23412336F, 0.23412336F, 0.23412336F, 0.23927818F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.40741017F, 0.23927818F, 0.4023595F, 0.23412336F, 0.38311923F, 0.5756463F, 0.38311923F, 0.23412336F, 0.23412336F, 0.23927818F, 0.40741017F, 0.13868621F, 0.31712782F, 0.30692235F, 0.5815754F, 0.31712782F, 0.13868621F, 0.13868621F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.38311923F, 0.10846615F, 0.23412336F, 0.23927818F, 0F, 0.10846615F, 0.23927818F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.40741017F, 0.23927818F, 0.4023595F, 0.23412336F, 0.38311923F, 0.5756463F, 0.38311923F, 0.23412336F, 0.23412336F, 0.23927818F, 0.5756463F, 0.31712782F, 0.5815754F, 0.5198604F, 2.7725887F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.23927818F, -0F, -0F, 0.23927818F, 0.4023595F, -0F, 0.111571774F, 0.10846615F, 0.10846615F, 0F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.25541282F, 0.111571774F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.111571774F, 0.10846615F, 0.38311923F, 0.13868621F, 0.31712782F, 0.30692235F, 0.5815754F, 0.31712782F, 0.13868621F, 0.13868621F, 0.10846615F, -0F, 0.23927818F, 0.23412336F, 0.23927818F, 0.10846615F, 0.40741017F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, 0F, 0.10846615F, 0.10846615F, 0.10846615F, -0F, -0F, -0F, 0.10846615F, -0F, 0.10846615F, -0F, 0.23412336F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23412336F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0.6577723F, 0.83105916F, 0.23927818F, 0.38311923F, 0.23412336F, 0.40741017F, 0.23927818F, 0.10846615F, 0F, -0F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.38311923F, 0.23927818F, 0.40741017F, 0.6577723F, 0.40741017F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.40741017F, 0.23927818F, 0.6577723F, 0.5756463F, 0.6577723F, 0.40741017F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0.6577723F, 0.83105916F, 0.23927818F, 0.38311923F, 0.23412336F, 0.40741017F, 0.23927818F, 0.10846615F, -0F, 0F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.38311923F, 0.23927818F, 0.40741017F, 0.6577723F, 0.40741017F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.40741017F, 0.23927818F, 0.6577723F, 0.5756463F, 0.6577723F, 0.40741017F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0.6577723F, 0.83105916F, 0.23927818F, 0.38311923F, 0.23412336F, 0.40741017F, 0.23927818F, 0.10846615F, -0F, -0F, 0F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.38311923F, 0.23927818F, 0.40741017F, 0.6577723F, 0.40741017F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.40741017F, 0.23927818F, 0.6577723F, 0.5756463F, 0.6577723F, 0.40741017F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, 0F, -0F, -0F, 0.10846615F, -0F, 0.10846615F, -0F, 0.23412336F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23412336F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, -0F, 0F, -0F, 0.10846615F, -0F, 0.10846615F, -0F, 0.23412336F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23412336F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, -0F, -0F, 0F, 0.10846615F, -0F, 0.10846615F, -0F, 0.23412336F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23412336F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0.6577723F, 0.83105916F, 0.23927818F, 0.38311923F, 0.40741017F, 0.40741017F, 0.23927818F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0F, 0.10846615F, 0.23927818F, 0.10846615F, 0.38311923F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.23927818F, 0.40741017F, 0.38311923F, 0.5815754F, 2.7725887F, 0.8369882F, 0.8369882F, 2.7725887F, 0.5815754F, 0.5815754F, 0.40741017F, 0.23927818F, 0.6577723F, 0.5756463F, 0.6577723F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, -0F, -0F, -0F, 0.10846615F, 0F, 0.10846615F, -0F, 0.23412336F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23412336F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0.38311923F, 0.65777236F, 0.23927818F, 0.38311923F, 0.40741017F, 0.40741017F, 0.23927818F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0F, 0.10846615F, 0.38311923F, 0.23927818F, 0.40741017F, 0.6577723F, 0.40741017F, 0.23927818F, 0.23927818F, 0.40741017F, 0.38311923F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.40741017F, 0.23927818F, 0.6577723F, 0.40741017F, 0.23927818F, 0.40741017F, 0.5756463F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, -0F, 0.10846615F, 0.10846615F, 0.10846615F, -0F, -0F, -0F, 0.10846615F, -0F, 0.10846615F, 0F, 0.23412336F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23412336F, 0.31712782F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 0.86050487F, 0.86050487F, 0.6577723F, 0.6577723F }, new float[] { 0.38311923F, 0.25541282F, 0.25541282F, 0.5858518F, 1.2070785F, 0.25541282F, 0.111571774F, 0.4023595F, 0.4023595F, 0.25541282F, 0.23412336F, 0.38311923F, 0.38311923F, 0.38311923F, 0.23412336F, 0.23412336F, 0.23412336F, 0.38311923F, 0.23412336F, 0.38311923F, 0.23412336F, 0F, 0.111571774F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.111571774F, 0.4023595F, 0.5858518F, 0.56233513F, 0.866434F, 1.1116413F, 0.8369882F, 0.866434F, 0.56233513F, 0.56233513F, 0.23412336F, 0.25541282F, 0.5858518F, 0.65777236F, 0.5858518F, 0.4023595F, 0.83105916F, 0.5756463F, 0.5756463F, 2.7725887F, 2.7725887F, 0.5756463F, 0.5756463F }, new float[] { 0.38311923F, 0.111571774F, 0.111571774F, 0.38311923F, 0.65777236F, 0.111571774F, 0.25541282F, 0.23412336F, 0.23412336F, 0.111571774F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.111571774F, 0F, 0.10846615F, 0.23927818F, 0.10846615F, -0F, -0F, 0.23412336F, 0.38311923F, 0.30692235F, 0.5198604F, 0.56233513F, 0.5815754F, 0.5198604F, 0.30692235F, 0.30692235F, 0.23412336F, 0.111571774F, 0.38311923F, 0.4023595F, 0.38311923F, 0.23412336F, 0.5756463F, 0.5756463F, 0.5756463F, 2.7725887F, 2.7725887F, 0.5756463F, 0.5756463F }, new float[] { 0.5756463F, 0.23412336F, 0.23412336F, 0.5756463F, 0.93242544F, 0.23412336F, 0.4023595F, 0.38311923F, 0.38311923F, 0.23412336F, 0.23927818F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.23412336F, 0.10846615F, 0F, 0.10846615F, -0F, 0.10846615F, 0.10846615F, 0.38311923F, 0.5756463F, 0.5198604F, 0.8369882F, 0.866434F, 2.7725887F, 0.8369882F, 0.5198604F, 0.5198604F, 0.38311923F, 0.23412336F, 0.5756463F, 0.5858518F, 0.5756463F, 0.38311923F, 0.38311923F, 0.86050487F, 0.86050487F, 2.7725887F, 2.7725887F, 0.86050487F, 0.86050487F }, new float[] { 0.5858518F, 0.38311923F, 0.38311923F, 0.86050487F, 1.3803654F, 0.38311923F, 0.5858518F, 0.5756463F, 0.5756463F, 0.38311923F, 0.40741017F, 0.6577723F, 0.6577723F, 0.6577723F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.40741017F, 0.6577723F, 0.40741017F, 0.38311923F, 0.23927818F, 0.10846615F, 0F, 0.10846615F, 0.23927818F, 0.23927818F, 0.5756463F, 0.86050487F, 0.8369882F, 0.5198604F, 0.8369882F, 2.7725887F, 0.866434F, 0.8369882F, 0.8369882F, 0.5756463F, 0.38311923F, 0.38311923F, 0.83105916F, 0.86050487F, 0.5756463F, 0.5756463F, 0.5756463F, 0.5756463F, 2.7725887F, 2.7725887F, 0.5756463F, 2.7725887F }, new float[] { 0.5756463F, 0.23412336F, 0.23412336F, 0.5756463F, 0.93242544F, 0.23412336F, 0.4023595F, 0.38311923F, 0.38311923F, 0.23412336F, 0.23927818F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.23927818F, 0.40741017F, 0.23927818F, 0.23412336F, 0.10846615F, -0F, 0.10846615F, 0F, 0.10846615F, 0.10846615F, 0.38311923F, 0.5756463F, 0.5198604F, 0.8369882F, 0.866434F, 2.7725887F, 0.8369882F, 0.5198604F, 0.5198604F, 0.38311923F, 0.23412336F, 0.5756463F, 0.5858518F, 0.5756463F, 0.38311923F, 0.38311923F, 0.86050487F, 0.86050487F, 2.7725887F, 2.7725887F, 0.86050487F, 0.86050487F }, new float[] { 0.38311923F, 0.111571774F, 0.111571774F, 0.38311923F, 0.65777236F, 0.111571774F, 0.25541282F, 0.23412336F, 0.23412336F, 0.111571774F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.111571774F, -0F, 0.10846615F, 0.23927818F, 0.10846615F, 0F, -0F, 0.23412336F, 0.38311923F, 0.30692235F, 0.5198604F, 0.56233513F, 0.5815754F, 0.5198604F, 0.30692235F, 0.30692235F, 0.23412336F, 0.111571774F, 0.38311923F, 0.4023595F, 0.38311923F, 0.23412336F, 0.5756463F, 0.5756463F, 0.5756463F, 2.7725887F, 2.7725887F, 0.5756463F, 0.5756463F }, new float[] { 0.38311923F, 0.111571774F, 0.111571774F, 0.38311923F, 0.65777236F, 0.111571774F, 0.25541282F, 0.23412336F, 0.23412336F, 0.111571774F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.111571774F, -0F, 0.10846615F, 0.23927818F, 0.10846615F, -0F, 0F, 0.23412336F, 0.38311923F, 0.30692235F, 0.5198604F, 0.56233513F, 0.5815754F, 0.5198604F, 0.30692235F, 0.30692235F, 0.23412336F, 0.111571774F, 0.38311923F, 0.4023595F, 0.38311923F, 0.23412336F, 0.5756463F, 0.5756463F, 0.5756463F, 2.7725887F, 2.7725887F, 0.5756463F, 0.5756463F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, 0.23927818F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.40741017F, 0.23927818F, 0.4023595F, 0.23412336F, 0.38311923F, 0.5756463F, 0.38311923F, 0.23412336F, 0.23412336F, 0F, 0.4023595F, -0F, 0.13868621F, 0.14384104F, 0.31712782F, 0.13868621F, -0F, -0F, 0.23927818F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.6577723F, 0.6577723F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F }, new float[] { 0.86050487F, 0.38311923F, 0.38311923F, 0.86050487F, 1.3803654F, 0.38311923F, 0.5858518F, 0.40741017F, 0.5756463F, 0.38311923F, 0.23412336F, 0.23927818F, 0.23927818F, 0.23927818F, 0.23412336F, 0.23412336F, 0.23412336F, 0.38311923F, 0.23412336F, 0.38311923F, 0.23412336F, 0.5858518F, 0.38311923F, 0.5756463F, 0.86050487F, 0.5756463F, 0.38311923F, 0.38311923F, 0.4023595F, 0F, 0.30692235F, 0.5198604F, 0.56233513F, 0.56233513F, 0.5198604F, 0.30692235F, 0.30692235F, 0.5756463F, 0.38311923F, 0.86050487F, 0.83105916F, 0.86050487F, 0.5756463F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.5815754F, 0.13868621F, 0.13868621F, 0.31712782F, 0.56233513F, 0.13868621F, 0.30692235F, 0.13868621F, 0.31712782F, 0.13868621F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 0.31712782F, 0.31712782F, 0.31712782F, 0.56233513F, 0.30692235F, 0.5198604F, 0.8369882F, 0.5198604F, 0.30692235F, 0.30692235F, -0F, 0.30692235F, 0F, 0.13868621F, 0.14384104F, 0.31712782F, 0.13868621F, -0F, -0F, 0.31712782F, 0.13868621F, 0.5815754F, 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.5198604F, 0.31712782F, 0.31712782F, 0.5815754F, 0.866434F, 0.31712782F, 0.5198604F, 0.31712782F, 0.5815754F, 0.31712782F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 2.7725887F, 0.5815754F, 0.5815754F, 0.5815754F, 0.866434F, 0.5198604F, 0.8369882F, 0.5198604F, 0.8369882F, 0.5198604F, 0.5198604F, 0.13868621F, 0.5198604F, 0.13868621F, 0F, 0.13868621F, 0.5815754F, 0.14384104F, 0.13868621F, 0.13868621F, 0.5815754F, 0.31712782F, 0.31712782F, 0.5815754F, 0.5815754F, 0.5815754F, 2.7725887F, 0.5815754F, 0.5815754F, 2.7725887F, 2.7725887F, 0.5815754F, 2.7725887F }, new float[] { 0.5815754F, 0.30692235F, 0.30692235F, 0.5198604F, 1.1116413F, 0.30692235F, 0.56233513F, 0.30692235F, 0.5198604F, 0.30692235F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.8369882F, 0.5198604F, 0.5198604F, 0.5198604F, 1.1116413F, 0.56233513F, 0.866434F, 0.8369882F, 0.866434F, 0.56233513F, 0.56233513F, 0.14384104F, 0.56233513F, 0.14384104F, 0.13868621F, 0F, 0.5198604F, 0.13868621F, 0.14384104F, 0.14384104F, 0.5198604F, 0.30692235F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5198604F, 0.8369882F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 2.7725887F, 0.5815754F, 0.5815754F, 2.7725887F, 1.3862944F, 0.5815754F, 0.8369882F, 0.5815754F, 2.7725887F, 0.5815754F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.5198604F, 0.8369882F, 0.5198604F, 0.5198604F, 0.5198604F, 0.8369882F, 0.5815754F, 2.7725887F, 2.7725887F, 2.7725887F, 0.5815754F, 0.5815754F, 0.31712782F, 0.56233513F, 0.31712782F, 0.5815754F, 0.5198604F, 0F, 0.5815754F, 0.31712782F, 0.31712782F, 2.7725887F, 0.5815754F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 0.866434F, 0.31712782F, 0.5198604F, 0.31712782F, 0.5815754F, 0.31712782F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 0.5815754F, 2.7725887F, 0.5815754F, 0.5815754F, 0.5815754F, 0.866434F, 0.5198604F, 0.8369882F, 0.866434F, 0.8369882F, 0.5198604F, 0.5198604F, 0.13868621F, 0.5198604F, 0.13868621F, 0.14384104F, 0.13868621F, 0.5815754F, 0F, 0.13868621F, 0.13868621F, 0.5815754F, 0.31712782F, 0.5198604F, 0.5815754F, 0.5815754F, 0.5815754F, 2.7725887F, 0.8369882F, 0.8369882F, 2.7725887F, 2.7725887F, 0.8369882F, 2.7725887F }, new float[] { 0.5815754F, 0.13868621F, 0.13868621F, 0.31712782F, 0.56233513F, 0.13868621F, 0.30692235F, 0.13868621F, 0.31712782F, 0.13868621F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 0.31712782F, 0.31712782F, 0.31712782F, 0.56233513F, 0.30692235F, 0.5198604F, 0.8369882F, 0.5198604F, 0.30692235F, 0.30692235F, -0F, 0.30692235F, -0F, 0.13868621F, 0.14384104F, 0.31712782F, 0.13868621F, 0F, -0F, 0.31712782F, 0.13868621F, 0.5815754F, 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.5815754F, 0.13868621F, 0.13868621F, 0.31712782F, 0.56233513F, 0.13868621F, 0.30692235F, 0.13868621F, 0.31712782F, 0.13868621F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 0.31712782F, 0.31712782F, 0.31712782F, 0.56233513F, 0.30692235F, 0.5198604F, 0.8369882F, 0.5198604F, 0.30692235F, 0.30692235F, -0F, 0.30692235F, -0F, 0.13868621F, 0.14384104F, 0.31712782F, 0.13868621F, -0F, 0F, 0.31712782F, 0.13868621F, 0.5815754F, 0.31712782F, 0.31712782F, 0.31712782F, 0.5815754F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F }, new float[] { 0.23412336F, 0.10846615F, 0.10846615F, 0.40741017F, 0.5858518F, 0.10846615F, 0.10846615F, 0.23927818F, 0.23927818F, 0.10846615F, 0.23927818F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.40741017F, 0.23927818F, 0.23412336F, 0.23412336F, 0.38311923F, 0.5756463F, 0.38311923F, 0.23412336F, 0.23412336F, 0.23927818F, 0.5756463F, 0.31712782F, 0.5815754F, 0.5198604F, 2.7725887F, 0.5815754F, 0.31712782F, 0.31712782F, 0F, 0.10846615F, 0.40741017F, 0.38311923F, 0.40741017F, 0.23927818F, 0.6577723F, 0.38311923F, 0.38311923F, 0.86050487F, 0.86050487F, 0.38311923F, 0.38311923F }, new float[] { 0.23927818F, -0F, -0F, 0.23927818F, 0.4023595F, -0F, 0.111571774F, 0.10846615F, 0.10846615F, -0F, 0.10846615F, 0.23927818F, 0.23927818F, 0.23927818F, 0.10846615F, 0.10846615F, 0.10846615F, 0.23927818F, 0.10846615F, 0.23927818F, 0.10846615F, 0.25541282F, 0.111571774F, 0.23412336F, 0.38311923F, 0.23412336F, 0.111571774F, 0.111571774F, 0.10846615F, 0.38311923F, 0.13868621F, 0.31712782F, 0.30692235F, 0.5815754F, 0.31712782F, 0.13868621F, 0.13868621F, 0.10846615F, 0F, 0.23927818F, 0.23412336F, 0.23927818F, 0.10846615F, 0.40741017F, 0.40741017F, 0.40741017F, 2.7725887F, 2.7725887F, 0.40741017F, 0.40741017F }, new float[] { 0.38311923F, 0.23927818F, 0.23927818F, 0.23927818F, 0.5756463F, 0.23927818F, 0.38311923F, 0.40741017F, 0.40741017F, 0.23927818F, 0.40741017F, 0.6577723F, 0.6577723F, 0.6577723F, 0.40741017F, 0.40741017F, 0.40741017F, 0.6577723F, 0.40741017F, 0.6577723F, 0.40741017F, 0.5858518F, 0.38311923F, 0.5756463F, 0.38311923F, 0.5756463F, 0.38311923F, 0.38311923F, 0.40741017F, 0.86050487F, 0.5815754F, 0.31712782F, 0.5815754F, 2.7725887F, 0.5198604F, 0.5815754F, 0.5815754F, 0.40741017F, 0.23927818F, 0F, 0.23412336F, 0.38311923F, 0.10846615F, 0.40741017F, 0.10846615F, 0.10846615F, 0.40741017F, 0.40741017F, 0.10846615F, 0.40741017F }, new float[] { 0.5756463F, 0.23412336F, 0.23412336F, 0.10846615F, 0.38311923F, 0.23412336F, 0.4023595F, 0.38311923F, 0.38311923F, 0.23412336F, 0.38311923F, 0.5756463F, 0.5756463F, 0.5756463F, 0.38311923F, 0.38311923F, 0.38311923F, 0.5756463F, 0.38311923F, 0.40741017F, 0.38311923F, 0.65777236F, 0.4023595F, 0.5858518F, 0.83105916F, 0.5858518F, 0.4023595F, 0.4023595F, 0.38311923F, 0.83105916F, 0.31712782F, 0.5815754F, 0.5198604F, 2.7725887F, 0.5815754F, 0.31712782F, 0.31712782F, 0.38311923F, 0.23412336F, 0.23412336F, 0F, 0.23412336F, 0.111571774F, 0.23927818F, 0.38311923F, 0.38311923F, 0.86050487F, 0.86050487F, 0.38311923F, 0.38311923F }, new float[] { 0.6577723F, 0.23927818F, 0.23927818F, 0.25541282F, 0.4023595F, 0.23927818F, 0.38311923F, 0.40741017F, 0.40741017F, 0.23927818F, 0.40741017F, 0.6577723F, 0.6577723F, 0.6577723F, 0.40741017F, 0.40741017F, 0.40741017F, 0.6577723F, 0.40741017F, 0.23927818F, 0.40741017F, 0.5858518F, 0.38311923F, 0.5756463F, 0.86050487F, 0.5756463F, 0.38311923F, 0.38311923F, 0.40741017F, 0.86050487F, 0.31712782F, 0.5815754F, 0.5198604F, 2.7725887F, 0.5815754F, 0.31712782F, 0.31712782F, 0.40741017F, 0.23927818F, 0.38311923F, 0.23412336F, 0F, 0.23412336F, 0.4023595F, 0.5756463F, 0.5756463F, 2.7725887F, 2.7725887F, 0.5756463F, 0.5756463F }, new float[] { 0.40741017F, 0.10846615F, 0.10846615F, 0.10846615F, 0.38311923F, 0.10846615F, 0.23412336F, 0.23927818F, 0.23927818F, 0.10846615F, 0.23927818F, 0.40741017F, 0.40741017F, 0.40741017F, 0.23927818F, 0.23927818F, 0.23927818F, 0.40741017F, 0.23927818F, 0.40741017F, 0.23927818F, 0.4023595F, 0.23412336F, 0.38311923F, 0.5756463F, 0.38311923F, 0.23412336F, 0.23412336F, 0.23927818F, 0.5756463F, 0.31712782F, 0.5815754F, 0.5198604F, 2.7725887F, 0.5815754F, 0.31712782F, 0.31712782F, 0.23927818F, 0.10846615F, 0.10846615F, 0.111571774F, 0.23412336F, 0F, 0.23927818F, 0.23927818F, 0.23927818F, 0.6577723F, 0.6577723F, 0.23927818F, 0.23927818F }, new float[] { 2.7725887F, 0.40741017F, 0.40741017F, 0.10846615F, 0.38311923F, 0.40741017F, 0.5756463F, 0.6577723F, 0.6577723F, 0.40741017F, 0.6577723F, 2.7725887F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F, 0.6577723F, 0.40741017F, 0.6577723F, 0.5756463F, 0.6577723F, 0.83105916F, 0.5756463F, 0.38311923F, 0.5756463F, 0.38311923F, 0.5756463F, 0.5756463F, 0.6577723F, 2.7725887F, 0.5815754F, 2.7725887F, 0.8369882F, 2.7725887F, 2.7725887F, 0.5815754F, 0.5815754F, 0.6577723F, 0.40741017F, 0.40741017F, 0.23927818F, 0.4023595F, 0.23927818F, 0F, 0.6577723F, 0.6577723F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F }, new float[] { 0.23412336F, 0.40741017F, 0.40741017F, 0.40741017F, 0.86050487F, 0.40741017F, 0.40741017F, 0.6577723F, 0.6577723F, 0.40741017F, 0.6577723F, 2.7725887F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F, 0.6577723F, 2.7725887F, 0.6577723F, 2.7725887F, 0.6577723F, 0.5756463F, 0.5756463F, 0.86050487F, 0.5756463F, 0.86050487F, 0.5756463F, 0.5756463F, 0.6577723F, 2.7725887F, 2.7725887F, 0.5815754F, 2.7725887F, 2.7725887F, 0.8369882F, 2.7725887F, 2.7725887F, 0.38311923F, 0.40741017F, 0.10846615F, 0.38311923F, 0.5756463F, 0.23927818F, 0.6577723F, 0F, -0F, 0.23927818F, 0.23927818F, -0F, 0.23927818F }, new float[] { 0.23412336F, 0.40741017F, 0.40741017F, 0.40741017F, 0.86050487F, 0.40741017F, 0.40741017F, 0.6577723F, 0.6577723F, 0.40741017F, 0.6577723F, 2.7725887F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F, 0.6577723F, 2.7725887F, 0.6577723F, 2.7725887F, 0.6577723F, 0.5756463F, 0.5756463F, 0.86050487F, 0.5756463F, 0.86050487F, 0.5756463F, 0.5756463F, 0.6577723F, 2.7725887F, 2.7725887F, 0.5815754F, 2.7725887F, 2.7725887F, 0.8369882F, 2.7725887F, 2.7725887F, 0.38311923F, 0.40741017F, 0.10846615F, 0.38311923F, 0.5756463F, 0.23927818F, 0.6577723F, -0F, 0F, 0.23927818F, 0.23927818F, -0F, 0.23927818F }, new float[] { 0.5756463F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 0.86050487F, 2.7725887F, 0.86050487F, 2.7725887F, 2.7725887F, 2.7725887F, 0.86050487F, 0.86050487F, 0.86050487F, 2.7725887F, 0.86050487F, 2.7725887F, 0.86050487F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 0.86050487F, 2.7725887F, 0.40741017F, 0.86050487F, 2.7725887F, 0.6577723F, 2.7725887F, 0.23927818F, 0.23927818F, 0F, -0F, 0.23927818F, 0.6577723F }, new float[] { 0.5756463F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 0.86050487F, 2.7725887F, 0.86050487F, 2.7725887F, 2.7725887F, 2.7725887F, 0.86050487F, 0.86050487F, 0.86050487F, 2.7725887F, 0.86050487F, 2.7725887F, 0.86050487F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 0.86050487F, 2.7725887F, 0.40741017F, 0.86050487F, 2.7725887F, 0.6577723F, 2.7725887F, 0.23927818F, 0.23927818F, -0F, 0F, 0.23927818F, 0.6577723F }, new float[] { 0.23412336F, 0.40741017F, 0.40741017F, 0.40741017F, 0.86050487F, 0.40741017F, 0.40741017F, 0.6577723F, 0.6577723F, 0.40741017F, 0.6577723F, 2.7725887F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F, 0.6577723F, 2.7725887F, 0.6577723F, 2.7725887F, 0.6577723F, 0.5756463F, 0.5756463F, 0.86050487F, 0.5756463F, 0.86050487F, 0.5756463F, 0.5756463F, 0.6577723F, 2.7725887F, 2.7725887F, 0.5815754F, 2.7725887F, 2.7725887F, 0.8369882F, 2.7725887F, 2.7725887F, 0.38311923F, 0.40741017F, 0.10846615F, 0.38311923F, 0.5756463F, 0.23927818F, 0.6577723F, -0F, -0F, 0.23927818F, 0.23927818F, 0F, 0.23927818F }, new float[] { 0.40741017F, 0.40741017F, 0.40741017F, 0.40741017F, 0.86050487F, 0.40741017F, 0.40741017F, 0.6577723F, 0.6577723F, 0.40741017F, 0.6577723F, 2.7725887F, 2.7725887F, 2.7725887F, 0.6577723F, 0.6577723F, 0.6577723F, 2.7725887F, 0.6577723F, 2.7725887F, 0.6577723F, 0.5756463F, 0.5756463F, 0.86050487F, 2.7725887F, 0.86050487F, 0.5756463F, 0.5756463F, 0.6577723F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 2.7725887F, 0.38311923F, 0.40741017F, 0.40741017F, 0.38311923F, 0.5756463F, 0.23927818F, 0.6577723F, 0.23927818F, 0.23927818F, 0.6577723F, 0.6577723F, 0.23927818F, 0F } };

        [TestMethod]
        public void BuildTree2()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(DistMat2, SequenceNames.Take(2).ToList());

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree2, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree3()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(DistMat3, SequenceNames.Take(3).ToList());

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree3, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree4()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(DistMat4, SequenceNames.Take(4).ToList());

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree4, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree10()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(DistMat10, SequenceNames.Take(10).ToList());

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree10, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree50()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeNoCopy()
        {
            float[][] matrixClone = new float[FullDistMat.Length][];

            for (int i = 0; i < matrixClone.Length; i++)
            {
                matrixClone[i] = new float[FullDistMat[i].Length];

                for (int j = 0; j < matrixClone[i].Length; j++)
                {
                    matrixClone[i][j] = FullDistMat[i][j];
                }
            }

            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(matrixClone, SequenceNames, copyMatrix: false);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeShort()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMatShort, SequenceNames);

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeShort, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeShortNoNegative()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMatShort, SequenceNames, allowNegativeBranches: false);

            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (node.Parent != null)
                {
                    Assert.IsTrue(node.Length >= 0, "A branch has negative length.");
                }
            }

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeShortNoNegative, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree1core()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames, numCores: 1);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree2cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames, numCores: 2);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree4cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames, numCores: 4);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree10cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames, numCores: 10);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree100cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames, numCores: 100);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod, ProgressTest]
        public void BuildTreeWithProgress(IProgress<double> progress)
        {
            int callCount = 0;

            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(FullDistMat, SequenceNames, progress: x =>
            {
                callCount++;
                progress.Report(x);
            });

            Assert.IsTrue(callCount > 0, "The progress callback was never called.");

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree2DArray()
        {
            float[,] matrixClone = new float[FullDistMat.Length, FullDistMat.Length];

            for (int i = 0; i < matrixClone.GetLength(0); i++)
            {
                for (int j = 0; j < matrixClone.GetLength(1); j++)
                {
                    matrixClone[i,j] = FullDistMat[i][j];
                }
            }

            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(matrixClone, SequenceNames);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree2DArrayNoCopy()
        {
            float[,] matrixClone = new float[FullDistMat.Length, FullDistMat.Length];

            for (int i = 0; i < matrixClone.GetLength(0); i++)
            {
                for (int j = 0; j < matrixClone.GetLength(1); j++)
                {
                    matrixClone[i, j] = FullDistMat[i][j];
                }
            }

            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(matrixClone, SequenceNames, copyMatrix: false);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree1DArray()
        {
            float[] matrixClone = new float[FullDistMat.Length * FullDistMat.Length];

            for (int i = 0; i < FullDistMat.Length; i++)
            {
                for (int j = 0; j < FullDistMat.Length; j++)
                {
                    matrixClone[i * FullDistMat.Length + j] = FullDistMat[i][j];
                }
            }

            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(matrixClone, SequenceNames);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree1DArrayNoCopy()
        {
            float[] matrixClone = new float[FullDistMat.Length * FullDistMat.Length];

            for (int i = 0; i < FullDistMat.Length; i++)
            {
                for (int j = 0; j < FullDistMat.Length; j++)
                {
                    matrixClone[i * FullDistMat.Length + j] = FullDistMat[i][j];
                }
            }

            TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(matrixClone, SequenceNames, copyMatrix: false);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree1DArrayUnmanaged()
        {
            IntPtr unmanagedMemory = System.Runtime.InteropServices.Marshal.AllocHGlobal(sizeof(float) * FullDistMat.Length * FullDistMat.Length);

            try
            {
                Span<float> span;

                unsafe
                {
                    float* matrixClone = (float*)unmanagedMemory;

                    for (int i = 0; i < FullDistMat.Length; i++)
                    {
                        for (int j = 0; j < FullDistMat.Length; j++)
                        {
                            matrixClone[i * FullDistMat.Length + j] = FullDistMat[i][j];
                        }
                    }

                    span = new Span<float>(matrixClone, FullDistMat.Length * FullDistMat.Length);
                }

                TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(span, SequenceNames);

                string treeAsNewick = tree.ToString();

                Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.FreeHGlobal(unmanagedMemory);
            }
        }

        [TestMethod]
        public void BuildTree1DArrayUnmanagedNoCopy()
        {
            IntPtr unmanagedMemory = System.Runtime.InteropServices.Marshal.AllocHGlobal(sizeof(float) * FullDistMat.Length * FullDistMat.Length);

            try
            {
                Span<float> span;

                unsafe
                {
                    float* matrixClone = (float*)unmanagedMemory;

                    for (int i = 0; i < FullDistMat.Length; i++)
                    {
                        for (int j = 0; j < FullDistMat.Length; j++)
                        {
                            matrixClone[i * FullDistMat.Length + j] = FullDistMat[i][j];
                        }
                    }

                    span = new Span<float>(matrixClone, FullDistMat.Length * FullDistMat.Length);
                }

                TreeNode tree = RapidNJ.BuildTreeFromDistanceMatrix(span, SequenceNames, copyMatrix: false);

                string treeAsNewick = tree.ToString();
                               Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.FreeHGlobal(unmanagedMemory);
            }
        }
    }
}