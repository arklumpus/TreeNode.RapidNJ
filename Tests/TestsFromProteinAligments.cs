using Microsoft.VisualStudio.TestTools.UnitTesting;
using PhyloTree;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Tests
{
    [TestClass]
    public class TestsFromProteinAlignments
    {
        private static Dictionary<string, string> ReadFasta(Stream fastaFileStream)
        {
            Dictionary<string, string> tbr = new Dictionary<string, string>();

            using (StreamReader sr = new StreamReader(fastaFileStream))
            {
                string currSeqName = "";
                string currSeq = "";


                string line = sr.ReadLine();
                while (!string.IsNullOrEmpty(line))
                {
                    if (line.StartsWith(">"))
                    {
                        if (!string.IsNullOrEmpty(currSeqName))
                        {
                            tbr.Add(currSeqName, currSeq);
                        }
                        currSeqName = line.Substring(1);
                        currSeq = "";
                    }
                    else
                    {
                        currSeq += line;
                    }

                    line = sr.ReadLine();
                }
                if (!string.IsNullOrEmpty(currSeqName))
                {
                    tbr.Add(currSeqName, currSeq);
                }
            }

            return tbr;
        }

        private static void TolerateTree(TreeNode tree)
        {
            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (Math.Abs(node.Length) < 1e-7)
                {
                    node.Length = 0;
                }
            }
        }

        private static Dictionary<string, string> FullAlignmentProtein = ReadFasta(Assembly.GetExecutingAssembly().GetManifestResourceStream("Tests.Data.AlignmentProtein.fas"));

        private static Dictionary<string, string> GetAlignmentProtein(int count, int length = 670)
        {
            Dictionary<string, string> tbr = new Dictionary<string, string>();

            int index = 0;

            foreach (KeyValuePair<string, string> kvp in FullAlignmentProtein)
            {
                if (index >= count)
                {
                    break;
                }

                tbr.Add(kvp.Key, kvp.Value.Substring(0, length));

                index++;
            }

            return tbr;
        }

        private const string Tree2 = "('t33':0.1392,'t35':0.1392);";
        private const string Tree3 = "('t35':0.079818,'t33':0.059381,'t40':0.029147);";
        private const string Tree4 = "(('t40':0.026101,'t35':0.082864):0.014278,'t33':0.045102,'t2':0.214);";
        private const string Tree10 = "('t40':0.026684,(((('t20':0.081361,'t2':0.065367):0.07004,'t25':0.045185):0.077045,'t33':0.052058):0.0062187,((('t14':0.074937,'t5':0.057918):0.083162,'t8':0.0041656):0.044272,'t12':0.075392):0.11188):0.003262,'t35':0.082281);";
        private const string FullTree = "((((('t24':0.079136,'t19':0.034205):0.017258,'t39':0.0093292):0.10413,'t50':0.072322):0.011178,(((((('t10':0.038074,'t11':0.020203):0.09195,'t16':0.035624):0.035276,('t23':0.034752,'t49':0.029828):0.13059):0.026152,'t44':0.07442):0.070936,'t1':0.040267):0.045472,'t47':0.037905):0.053617):0.0017833,(('t6':0.056492,'t31':0.075486):0.029825,(('t4':0.056095,'t45':0.074629):0.0079797,('t7':0.095834,'t30':0.072749):0.02885):0.072169):0.013307,((((((('t9':0.069463,'t36':0.042527):0.031594,('t43':0.10234,'t37':0.0047837):0.081018):0.020925,((('t46':0.0022828,'t22':0.030519):0.063206,(('t18':0.024221,'t48':0.082195):0.050741,'t3':0.029853):0.075964):0.069176,'t26':0.096234):0.038133):0.074361,('t38':0.048869,'t42':0.054843):0.078451):0.0071602,(('t34':0.1056,'t13':0.044138):0.0078115,(('t17':0.098019,'t29':0.043575):0.010895,(((('t41':0.038299,'t15':0.074029):0.040995,'t27':0.11892):0.062262,'t32':0.10073):0.011326,'t28':0.032469):0.027356):0.03118):0.067263):0.0019563,'t21':0.038066):0.062443,(((('t14':0.074877,'t5':0.057978):0.084195,'t8':0.0031324):0.040316,'t12':0.079349):0.034623,(('t40':0.026655,'t35':0.08231):0.0011534,((('t20':0.083258,'t2':0.06347):0.074383,'t25':0.040843):0.07637,'t33':0.052733):0.0083272):0.077256):0.042639):0.064483);";
        private const string FullTreeJC = "((((('t24':0.075501,'t19':0.035713):0.013902,'t39':0.012448):0.097762,'t50':0.071551):0.010637,(((((('t10':0.036333,'t11':0.021369):0.083705,'t16':0.040151):0.035076,('t23':0.034007,'t49':0.02987):0.121):0.02089,'t44':0.076625):0.061165,'t1':0.045879):0.039265,'t47':0.041059):0.048791):0.0019811,(('t6':0.055788,'t31':0.073326):0.028805,(('t4':0.055539,'t45':0.072374):0.0090968,('t7':0.092226,'t30':0.071747):0.025756):0.066635):0.011734,((((('t34':0.10046,'t13':0.045617):0.0086553,(('t17':0.093305,'t29':0.045005):0.011222,(((('t41':0.039761,'t15':0.070476):0.039833,'t27':0.11362):0.055715,'t32':0.099419):0.0077173,'t28':0.036454):0.024342):0.027889):0.060983,'t21':0.040844):0.0015521,(((('t9':0.066753,'t36':0.04316):0.031551,('t43':0.095094,'t37':0.010125):0.07488):0.020225,((('t46':0.0041152,'t22':0.028503):0.063905,(('t18':0.027956,'t48':0.07658):0.044421,'t3':0.034018):0.068727):0.061551,'t26':0.095802):0.033634):0.066172,('t38':0.048293,'t42':0.053631):0.075209):0.0064067):0.057028,(((('t14':0.072279,'t5':0.057675):0.075964,'t8':0.0089504):0.036392,'t12':0.078157):0.032689,(('t40':0.028479,'t35':0.078517):0.0031195,((('t20':0.079956,'t2':0.063252):0.065993,'t25':0.045264):0.068319,'t33':0.055394):0.0056559):0.070957):0.039386):0.05709);";
        private const string FullTreeShort = "(((((((((('t15':0,'t41':0):0.1331,'t29':-0.025517):0.013134,'t27':-0.013134):0.0067659,'t28':-0.0067659):0.0034886,'t17':-0.0034886):0.053764,'t32':0.054948):0.054991,(('t14':0.064352,'t5':0.043234):0.11788,'t8':-0.0012872):0.11525):0.030171,'t42':0.022987):0.050425,(((((('t20':0.11034,'t2':0.12285):0.11993,'t25':0.0086237):0.060786,'t33':0.070136):0.083267,'t35':-0.029474):0.015125,'t40':-0.015125):0.14019,'t12':-0.023998):0.098643):0.033627,(((('t37':0,'t43':0):0.24999,'t38':-0.016796):0.010188,'t13':-0.010188):0.0040379,((('t22':0,'t46':0):0.042402,((('t18':0,'t3':0):0.050542,'t48':0.057043):0.25589,'t26':-0.076488):0.11158):0.052762,'t34':-0.01168):0.0056005):0.0018798,((((((((('t4':0.099663,'t30':0.13353):0.06905,'t31':0.047546):0.0038229,'t7':0.04997):0.066062,'t39':-0.01227):0.0033883,(('t45':-0.022242,'t24':0.25544):0.012048,'t6':-0.012048):0.0036456):0.0036618,'t47':-0.0071788):0.023784,(('t19':0.051938,'t50':0.055647):0.037927,((('t49':0,'t23':0):0.1765,'t1':0.056696):0.045771,((('t10':-0.028155,'t44':0.13574):0.014547,'t11':-0.014547):0.0075241,'t16':-0.0075241):0.076069):0.080951):0.027816):0.034382,('t36':0,'t9':0):0.050048):0.064369,'t21':-0.010576):0.0033096);";
        private const string FullTreeShortNoNegative = "(((((((((('t15':0,'t41':0):0.10759,'t29':0):0,'t27':0):0,'t28':0):0,'t17':0):0.053764,'t32':0.054948):0.054991,(('t14':0.064352,'t5':0.043234):0.1166,'t8':0):0.11525):0.030171,'t42':0.022987):0.050425,(((((('t20':0.11034,'t2':0.12285):0.11993,'t25':0.0086237):0.060786,'t33':0.070136):0.053793,'t35':0):0,'t40':0):0.11619,'t12':0):0.098643):0.033627,(((('t37':0,'t43':0):0.23319,'t38':0):0,'t13':0):0.0040379,((('t22':0,'t46':0):0.042402,((('t18':0,'t3':0):0.050542,'t48':0.057043):0.1794,'t26':0):0.11158):0.041082,'t34':0):0.0056005):0.0018798,((((((((('t4':0.099663,'t30':0.13353):0.06905,'t31':0.047546):0.0038229,'t7':0.04997):0.053793,'t39':0):0.0033883,(('t45':0,'t24':0.23319):0,'t6':0):0.0036456):0,'t47':0):0.022026,(('t19':0.051938,'t50':0.055647):0.037927,((('t49':0,'t23':0):0.1765,'t1':0.056696):0.045771,((('t10':0,'t44':0.10759):0,'t11':0):0,'t16':0):0.076069):0.080951):0.027816):0.034381,('t36':0,'t9':0):0.050048):0.053793,'t21':0):0.0033096);";
        private const string FullTreeShortJC = "(((((((((((('t4':0.096906,'t30':0.12766):0.06114,'t31':0.051145):0.0014331,'t7':0.051399):0.059756,'t39':-0.0069238):0.0019951,(('t45':-0.014089,'t24':0.23866):0.0076314,'t6':-0.0076314):0.0030337):0.0017259,'t47':-0.0042403):0.026953,(('t19':0.051835,'t50':0.053829):0.036669,((('t49':0,'t23':0):0.16312,'t1':0.061448):0.039779,((('t10':-0.019106,'t44':0.12477):0.0098712,'t11':-0.0098712):0.0051057,'t16':-0.0051057):0.076291):0.073763):0.021827):0.029859,('t36':0,'t9':0):0.052518):0.055707,(((((((('t20':0.10543,'t2':0.11914):0.094962,'t25':0.025843):0.048899,'t33':0.073335):0.066538,'t35':-0.013705):0.007033,'t40':-0.007033):0.12637,'t12':-0.014617):0.025525,(('t14':0.06207,'t5':0.043594):0.10497,'t8':0.0073139):0.10803):0.051985,((((((('t15':0,'t41':0):0.12212,'t29':-0.016459):0.0084713,'t27':-0.0084713):0.004364,'t28':-0.004364):0.0022501,'t17':-0.0022501):0.052222,'t32':0.05427):0.053247,'t42':-0.00041468):0.055293):0.05157):0.0036622,'t13':-0.0063047):0.0035381,((('t22':0,'t46':0):0.048948,((('t18':0,'t3':0):0.049877,'t48':0.055788):0.2219,'t26':-0.050161):0.097323):0.049766,'t34':-0.009667):0.0051765):0.0015614,(('t37':0,'t43':0):0.23586,'t38':-0.011291):0.0059187,'t21':-0.0059187);";
        private const string FullTreeShortJCNoNegative = "(((((((((((('t4':0.096906,'t30':0.12766):0.06114,'t31':0.051145):0.0014331,'t7':0.051399):0.052832,'t39':0):0.0019951,(('t45':0,'t24':0.22457):0,'t6':0):0.0030337):0,'t47':0):0.025695,(('t19':0.051835,'t50':0.053829):0.036669,((('t49':0,'t23':0):0.16312,'t1':0.061448):0.039779,((('t10':0,'t44':0.10566):0,'t11':0):0,'t16':0):0.076291):0.073763):0.021827):0.029859,('t36':0,'t9':0):0.052518):0.055707,(((((((('t20':0.10543,'t2':0.11914):0.094962,'t25':0.025843):0.048899,'t33':0.073335):0.052832,'t35':0):0,'t40':0):0.11175,'t12':0):0.025525,(('t14':0.06207,'t5':0.043594):0.10497,'t8':0.0073139):0.10803):0.051985,((((((('t15':0,'t41':0):0.10566,'t29':0):0,'t27':0):0,'t28':0):0,'t17':0):0.052222,'t32':0.05427):0.052832,'t42':0):0.055293):0.05157):0,'t13':0):0.0025472,((('t22':0,'t46':0):0.048948,((('t18':0,'t3':0):0.049877,'t48':0.055788):0.17174,'t26':0):0.097323):0.040099,'t34':0):0.0048462):0.0037401,(('t37':0,'t43':0):0.22457,'t38':0):0.0037401,'t21':0);";

        private static float[][] DistMat2 = new float[][] { new float[] { 0F, 0.13919875F }, new float[] { 0.13919875F, 0F } };
        private static float[][] DistMat3 = new float[][] { new float[] { 0F, 0.13919875F, 0.08852768F }, new float[] { 0.13919875F, 0F, 0.1089652F }, new float[] { 0.08852768F, 0.1089652F, 0F } };
        private static float[][] DistMat4 = new float[][] { new float[] { 0F, 0.13919875F, 0.08852768F, 0.25909817F }, new float[] { 0.13919875F, 0F, 0.1089652F, 0.31418446F }, new float[] { 0.08852768F, 0.1089652F, 0F, 0.2513293F }, new float[] { 0.25909817F, 0.31418446F, 0.2513293F, 0F } };
        private static float[][] DistMat10 = new float[][] { new float[] { 0F, 0.13919875F, 0.08852768F, 0.25909817F, 0.28183144F, 0.1763314F, 0.24723293F, 0.3628593F, 0.38037816F, 0.22488913F }, new float[] { 0.13919875F, 0F, 0.1089652F, 0.31418446F, 0.32020926F, 0.2203131F, 0.27314875F, 0.38272563F, 0.3972948F, 0.24440505F }, new float[] { 0.08852768F, 0.1089652F, 0F, 0.2513293F, 0.25971228F, 0.15681513F, 0.21445674F, 0.3379635F, 0.3484545F, 0.19032924F }, new float[] { 0.25909817F, 0.31418446F, 0.2513293F, 0F, 0.14672771F, 0.19113985F, 0.40524134F, 0.48503813F, 0.5096429F, 0.37802777F }, new float[] { 0.28183144F, 0.32020926F, 0.25971228F, 0.14672771F, 0F, 0.18603931F, 0.433382F, 0.5200049F, 0.53758353F, 0.39835316F }, new float[] { 0.1763314F, 0.2203131F, 0.15681513F, 0.19113985F, 0.18603931F, 0F, 0.30678007F, 0.4251042F, 0.4369676F, 0.28267485F }, new float[] { 0.24723293F, 0.27314875F, 0.21445674F, 0.40524134F, 0.433382F, 0.30678007F, 0F, 0.26152596F, 0.2856486F, 0.1194967F }, new float[] { 0.3628593F, 0.38272563F, 0.3379635F, 0.48503813F, 0.5200049F, 0.4251042F, 0.26152596F, 0F, 0.13285491F, 0.14605281F }, new float[] { 0.38037816F, 0.3972948F, 0.3484545F, 0.5096429F, 0.53758353F, 0.4369676F, 0.2856486F, 0.13285491F, 0F, 0.16145718F }, new float[] { 0.22488913F, 0.24440505F, 0.19032924F, 0.37802777F, 0.39835316F, 0.28267485F, 0.1194967F, 0.14605281F, 0.16145718F, 0F } };
        private static float[][] FullDistMat = new float[][] { new float[] { 0F, 0.13919875F, 0.08852768F, 0.25909817F, 0.28183144F, 0.1763314F, 0.24723293F, 0.3628593F, 0.38037816F, 0.22488913F, 0.33429363F, 0.4241425F, 0.45124578F, 0.36604455F, 0.35590953F, 0.33285433F, 0.4573224F, 0.47939077F, 0.428776F, 0.42044216F, 0.3468458F, 0.39236432F, 0.4968448F, 0.5781015F, 0.60791665F, 0.5024512F, 0.6017958F, 0.6017958F, 0.37254572F, 0.41955328F, 0.40179005F, 0.5630252F, 0.5511694F, 0.50989467F, 0.47989392F, 0.41108263F, 0.46136555F, 0.40012527F, 0.37678742F, 0.2778719F, 0.4241425F, 0.53021824F, 0.41610536F, 0.45124578F, 0.5034659F, 0.47327211F, 0.62924093F, 0.5598304F, 0.51897776F, 0.45607919F }, new float[] { 0.13919875F, 0F, 0.1089652F, 0.31418446F, 0.32020926F, 0.2203131F, 0.27314875F, 0.38272563F, 0.3972948F, 0.24440505F, 0.3531953F, 0.43113446F, 0.46572745F, 0.37909892F, 0.38206103F, 0.35821357F, 0.47939077F, 0.49443182F, 0.46096033F, 0.44899276F, 0.35638872F, 0.40584695F, 0.5317296F, 0.6035935F, 0.6343198F, 0.54593813F, 0.63685495F, 0.627956F, 0.38570487F, 0.44409803F, 0.4262568F, 0.5761489F, 0.59887755F, 0.5432383F, 0.51851374F, 0.4251042F, 0.46882904F, 0.4276311F, 0.41376394F, 0.30148768F, 0.45246965F, 0.54212713F, 0.44409803F, 0.46572745F, 0.5347789F, 0.50731725F, 0.65183413F, 0.58924884F, 0.54682547F, 0.48552933F }, new float[] { 0.08852768F, 0.1089652F, 0F, 0.2513293F, 0.25971228F, 0.15681513F, 0.21445674F, 0.3379635F, 0.3484545F, 0.19032924F, 0.3044892F, 0.37447318F, 0.40691647F, 0.3258188F, 0.31898966F, 0.29997298F, 0.41251218F, 0.43345442F, 0.39545622F, 0.3703929F, 0.3044892F, 0.34772614F, 0.46461418F, 0.54682547F, 0.57144123F, 0.46976092F, 0.582298F, 0.5781015F, 0.3382648F, 0.40691647F, 0.37567452F, 0.5517826F, 0.5444024F, 0.49919793F, 0.45881146F, 0.38812768F, 0.4333451F, 0.36143973F, 0.36467868F, 0.24429101F, 0.40117803F, 0.5083141F, 0.39338952F, 0.4241425F, 0.46717313F, 0.44174817F, 0.6178305F, 0.5409857F, 0.4933935F, 0.43229127F }, new float[] { 0.25909817F, 0.31418446F, 0.2513293F, 0F, 0.14672771F, 0.19113985F, 0.40524134F, 0.48503813F, 0.5096429F, 0.37802777F, 0.48687768F, 0.57144123F, 0.590753F, 0.5097461F, 0.5219421F, 0.5087514F, 0.59857F, 0.60288537F, 0.5773122F, 0.5564762F, 0.51750845F, 0.55742186F, 0.68233204F, 0.77977496F, 0.79580724F, 0.6625885F, 0.80392224F, 0.7985077F, 0.529287F, 0.582298F, 0.5723839F, 0.7458554F, 0.7439618F, 0.7218121F, 0.67361236F, 0.570681F, 0.6332034F, 0.56728905F, 0.54279095F, 0.42992717F, 0.5840199F, 0.68966544F, 0.5992921F, 0.6210174F, 0.67715436F, 0.64470804F, 0.8345288F, 0.76901007F, 0.7257026F, 0.62732893F }, new float[] { 0.28183144F, 0.32020926F, 0.25971228F, 0.14672771F, 0F, 0.18603931F, 0.433382F, 0.5200049F, 0.53758353F, 0.39835316F, 0.5058914F, 0.6010832F, 0.62542886F, 0.54123116F, 0.54593813F, 0.5484101F, 0.62479216F, 0.63820773F, 0.6203661F, 0.5945747F, 0.54123116F, 0.5781015F, 0.69184655F, 0.81764376F, 0.8343797F, 0.691027F, 0.7985077F, 0.7877765F, 0.5533453F, 0.60791665F, 0.5851852F, 0.7676444F, 0.7492675F, 0.7113805F, 0.67837715F, 0.5749097F, 0.6542634F, 0.5798065F, 0.57144123F, 0.46222335F, 0.6228989F, 0.72364783F, 0.61226153F, 0.63879967F, 0.68188983F, 0.64926976F, 0.84591126F, 0.7743008F, 0.7307085F, 0.6317818F }, new float[] { 0.1763314F, 0.2203131F, 0.15681513F, 0.19113985F, 0.18603931F, 0F, 0.30678007F, 0.4251042F, 0.4369676F, 0.28267485F, 0.3833881F, 0.47196993F, 0.4968448F, 0.41720903F, 0.41361052F, 0.4022364F, 0.48446822F, 0.5034659F, 0.48446822F, 0.45022616F, 0.41376394F, 0.45246965F, 0.5739254F, 0.6682519F, 0.69664294F, 0.5765171F, 0.68491673F, 0.68491673F, 0.44173378F, 0.5006506F, 0.46752155F, 0.64704436F, 0.6280399F, 0.6022649F, 0.5689884F, 0.48503813F, 0.5245316F, 0.45370027F, 0.45009372F, 0.3422716F, 0.5020542F, 0.6061011F, 0.5006506F, 0.5317296F, 0.59000367F, 0.5606773F, 0.74080646F, 0.6625885F, 0.62479216F, 0.5332498F }, new float[] { 0.24723293F, 0.27314875F, 0.21445674F, 0.40524134F, 0.433382F, 0.30678007F, 0F, 0.26152596F, 0.2856486F, 0.1194967F, 0.3060126F, 0.3871031F, 0.42044216F, 0.33078697F, 0.33016083F, 0.31371102F, 0.39835316F, 0.4369676F, 0.40179005F, 0.3762908F, 0.32140726F, 0.36942804F, 0.49129534F, 0.5689884F, 0.5902569F, 0.49689957F, 0.6102063F, 0.59711F, 0.34027654F, 0.40998384F, 0.39545622F, 0.5533453F, 0.5289836F, 0.4959145F, 0.4590564F, 0.3806839F, 0.4296333F, 0.38037816F, 0.37370783F, 0.25353214F, 0.40415993F, 0.5014294F, 0.39284208F, 0.44176278F, 0.4979449F, 0.47502482F, 0.6202844F, 0.5631059F, 0.5254962F, 0.4429708F }, new float[] { 0.3628593F, 0.38272563F, 0.3379635F, 0.48503813F, 0.5200049F, 0.4251042F, 0.26152596F, 0F, 0.13285491F, 0.14605281F, 0.41694137F, 0.49898294F, 0.5369461F, 0.44899276F, 0.44177756F, 0.422717F, 0.5239809F, 0.53602165F, 0.50040054F, 0.48424268F, 0.44176278F, 0.47106573F, 0.56730604F, 0.6809951F, 0.68579054F, 0.6088107F, 0.6740886F, 0.6599984F, 0.42395785F, 0.47855452F, 0.4603466F, 0.630816F, 0.62140214F, 0.58625835F, 0.5622509F, 0.4590564F, 0.5015908F, 0.46864504F, 0.46492872F, 0.360528F, 0.4874777F, 0.595317F, 0.46734628F, 0.51310366F, 0.60951114F, 0.5791595F, 0.71480113F, 0.6470048F, 0.6228535F, 0.5224745F }, new float[] { 0.38037816F, 0.3972948F, 0.3484545F, 0.5096429F, 0.53758353F, 0.4369676F, 0.2856486F, 0.13285491F, 0F, 0.16145718F, 0.43936667F, 0.51210856F, 0.54663527F, 0.46864504F, 0.4429931F, 0.44905242F, 0.53758353F, 0.59203637F, 0.5295062F, 0.50512576F, 0.45754513F, 0.49129534F, 0.60765916F, 0.6977003F, 0.7025985F, 0.6377795F, 0.7003367F, 0.69546103F, 0.43936667F, 0.47989392F, 0.48067284F, 0.647367F, 0.6566897F, 0.59728897F, 0.57674485F, 0.4603466F, 0.52313095F, 0.48503813F, 0.4774608F, 0.37136292F, 0.50818783F, 0.619049F, 0.49513042F, 0.52645385F, 0.6247739F, 0.5851852F, 0.71213984F, 0.6443972F, 0.6202844F, 0.5200049F }, new float[] { 0.22488913F, 0.24440505F, 0.19032924F, 0.37802777F, 0.39835316F, 0.28267485F, 0.1194967F, 0.14605281F, 0.16145718F, 0F, 0.27022707F, 0.35078079F, 0.38945606F, 0.30296868F, 0.2930855F, 0.28040326F, 0.37468857F, 0.40179005F, 0.3680507F, 0.3432331F, 0.28494364F, 0.32452178F, 0.43220484F, 0.53602165F, 0.5441447F, 0.46265346F, 0.54663527F, 0.53446907F, 0.29993623F, 0.356343F, 0.35157353F, 0.5233773F, 0.4922504F, 0.46388373F, 0.43693784F, 0.34412757F, 0.39411807F, 0.33479047F, 0.33479047F, 0.22266796F, 0.3703929F, 0.47106573F, 0.35310426F, 0.38608396F, 0.48259568F, 0.45271376F, 0.5894952F, 0.5260584F, 0.4979449F, 0.40415993F }, new float[] { 0.33429363F, 0.3531953F, 0.3044892F, 0.48687768F, 0.5058914F, 0.3833881F, 0.3060126F, 0.41694137F, 0.43936667F, 0.27022707F, 0F, 0.2201851F, 0.2809729F, 0.18558191F, 0.21047859F, 0.18901055F, 0.27076602F, 0.30899435F, 0.25372177F, 0.21785513F, 0.17792262F, 0.20902468F, 0.3233907F, 0.42535976F, 0.44645947F, 0.3550001F, 0.4311837F, 0.43819273F, 0.33798894F, 0.41282934F, 0.36518776F, 0.54511356F, 0.52565485F, 0.49334502F, 0.4357999F, 0.37409273F, 0.43220484F, 0.35140887F, 0.34509853F, 0.2503217F, 0.39365843F, 0.5064685F, 0.3893209F, 0.39931408F, 0.49546304F, 0.46208346F, 0.59324914F, 0.5387755F, 0.5030639F, 0.42077968F }, new float[] { 0.4241425F, 0.43113446F, 0.37447318F, 0.57144123F, 0.6010832F, 0.47196993F, 0.3871031F, 0.49898294F, 0.51210856F, 0.35078079F, 0.2201851F, 0F, 0.11334051F, 0.053416908F, 0.28664637F, 0.2628271F, 0.33429363F, 0.36928868F, 0.3311857F, 0.27181724F, 0.2615722F, 0.2874837F, 0.4047831F, 0.5068902F, 0.5381389F, 0.44412684F, 0.53660625F, 0.5287156F, 0.42770118F, 0.47414923F, 0.44536993F, 0.63608617F, 0.5863913F, 0.54842734F, 0.52343726F, 0.45503366F, 0.51210856F, 0.43936667F, 0.4572131F, 0.3365666F, 0.50166225F, 0.61360687F, 0.49272278F, 0.5194328F, 0.58478665F, 0.5639885F, 0.72364783F, 0.6656776F, 0.61477685F, 0.52479756F }, new float[] { 0.45124578F, 0.46572745F, 0.40691647F, 0.590753F, 0.62542886F, 0.4968448F, 0.42044216F, 0.5369461F, 0.54663527F, 0.38945606F, 0.2809729F, 0.11334051F, 0F, 0.113098495F, 0.3500144F, 0.3365666F, 0.4150075F, 0.43584275F, 0.41158533F, 0.35682365F, 0.31954432F, 0.36005095F, 0.47048324F, 0.5689209F, 0.5939838F, 0.5058914F, 0.6223058F, 0.6266883F, 0.45833945F, 0.5141231F, 0.47348353F, 0.6674829F, 0.6385653F, 0.59474003F, 0.5540896F, 0.49477893F, 0.5425605F, 0.47783127F, 0.4852441F, 0.36740178F, 0.5272216F, 0.62919635F, 0.51797646F, 0.5375105F, 0.6393873F, 0.61728925F, 0.7720249F, 0.68233204F, 0.6574804F, 0.56318176F }, new float[] { 0.36604455F, 0.37909892F, 0.3258188F, 0.5097461F, 0.54123116F, 0.41720903F, 0.33078697F, 0.44899276F, 0.46864504F, 0.30296868F, 0.18558191F, 0.053416908F, 0.113098495F, 0F, 0.2459173F, 0.23155268F, 0.3059881F, 0.34282342F, 0.3029931F, 0.2539327F, 0.21967457F, 0.24972986F, 0.36740178F, 0.46445975F, 0.4903278F, 0.3910618F, 0.50026846F, 0.4964872F, 0.38272563F, 0.42656904F, 0.40544564F, 0.5884339F, 0.56307954F, 0.51758295F, 0.47964075F, 0.40780398F, 0.47237796F, 0.39700025F, 0.4071078F, 0.29335785F, 0.45958057F, 0.56972814F, 0.44406956F, 0.476526F, 0.54212713F, 0.52237064F, 0.67339206F, 0.61410636F, 0.57472205F, 0.47783127F }, new float[] { 0.35590953F, 0.38206103F, 0.31898966F, 0.5219421F, 0.54593813F, 0.41361052F, 0.33016083F, 0.44177756F, 0.4429931F, 0.2930855F, 0.21047859F, 0.28664637F, 0.3500144F, 0.2459173F, 0F, 0.13197742F, 0.27430388F, 0.30373928F, 0.25998363F, 0.23764102F, 0.20781784F, 0.25998363F, 0.3540954F, 0.46461418F, 0.48312587F, 0.38072535F, 0.45970434F, 0.47067502F, 0.38239524F, 0.437011F, 0.40870708F, 0.5805686F, 0.5386072F, 0.53899807F, 0.48367724F, 0.3972948F, 0.47635955F, 0.38008115F, 0.37678742F, 0.28664637F, 0.41720903F, 0.5461341F, 0.41610536F, 0.43348998F, 0.5268416F, 0.49963197F, 0.6427261F, 0.5765171F, 0.54279095F, 0.44529706F }, new float[] { 0.33285433F, 0.35821357F, 0.29997298F, 0.5087514F, 0.5484101F, 0.4022364F, 0.31371102F, 0.422717F, 0.44905242F, 0.28040326F, 0.18901055F, 0.2628271F, 0.3365666F, 0.23155268F, 0.13197742F, 0F, 0.26219815F, 0.2970363F, 0.23703676F, 0.21785513F, 0.1916024F, 0.22882488F, 0.32500535F, 0.43113446F, 0.44887567F, 0.34401548F, 0.44054696F, 0.45484278F, 0.3522998F, 0.4081772F, 0.38373375F, 0.54417944F, 0.5328751F, 0.49625397F, 0.45263135F, 0.37273225F, 0.44177756F, 0.36281326F, 0.36281326F, 0.2685448F, 0.39571437F, 0.5208975F, 0.38470662F, 0.4081772F, 0.48312587F, 0.45370027F, 0.6097434F, 0.5581947F, 0.5058914F, 0.4230156F }, new float[] { 0.4573224F, 0.47939077F, 0.41251218F, 0.59857F, 0.62479216F, 0.48446822F, 0.39835316F, 0.5239809F, 0.53758353F, 0.37468857F, 0.27076602F, 0.33429363F, 0.4150075F, 0.3059881F, 0.27430388F, 0.26219815F, 0F, 0.16858272F, 0.1916024F, 0.15035386F, 0.2765296F, 0.31201184F, 0.41267174F, 0.519941F, 0.543684F, 0.4561819F, 0.51459503F, 0.52628535F, 0.43233374F, 0.52479756F, 0.4761275F, 0.63813096F, 0.61045533F, 0.5984782F, 0.528924F, 0.45628592F, 0.51753247F, 0.45124578F, 0.44766426F, 0.34368953F, 0.51459503F, 0.6154424F, 0.49786717F, 0.5326518F, 0.60791665F, 0.58651507F, 0.7359884F, 0.67715436F, 0.64330286F, 0.54212713F }, new float[] { 0.47939077F, 0.49443182F, 0.43345442F, 0.60288537F, 0.63820773F, 0.5034659F, 0.4369676F, 0.53602165F, 0.59203637F, 0.40179005F, 0.30899435F, 0.36928868F, 0.43584275F, 0.34282342F, 0.30373928F, 0.2970363F, 0.16858272F, 0F, 0.21800765F, 0.18596713F, 0.31808093F, 0.36510888F, 0.44766426F, 0.5639885F, 0.5890075F, 0.4858182F, 0.56645614F, 0.56235284F, 0.46810678F, 0.5287156F, 0.47989392F, 0.6287287F, 0.59702826F, 0.5805686F, 0.5614761F, 0.46734628F, 0.5135785F, 0.46938732F, 0.48793F, 0.36281326F, 0.52237064F, 0.61979896F, 0.51701534F, 0.55261064F, 0.6210174F, 0.6035935F, 0.75120866F, 0.68665105F, 0.6569543F, 0.55016F }, new float[] { 0.428776F, 0.46096033F, 0.39545622F, 0.5773122F, 0.6203661F, 0.48446822F, 0.40179005F, 0.50040054F, 0.5295062F, 0.3680507F, 0.25372177F, 0.3311857F, 0.41158533F, 0.3029931F, 0.25998363F, 0.23703676F, 0.1916024F, 0.21800765F, 0F, 0.13072379F, 0.2678998F, 0.30899435F, 0.43348998F, 0.5598888F, 0.5681079F, 0.46349338F, 0.5461341F, 0.5461341F, 0.4150075F, 0.47176966F, 0.45387766F, 0.59660316F, 0.58819175F, 0.5543865F, 0.5014294F, 0.434595F, 0.5096429F, 0.4299838F, 0.4299838F, 0.32808962F, 0.48046377F, 0.5607269F, 0.47176966F, 0.49408904F, 0.58651507F, 0.5533453F, 0.67292005F, 0.6538556F, 0.60791665F, 0.51459503F }, new float[] { 0.42044216F, 0.44899276F, 0.3703929F, 0.5564762F, 0.5945747F, 0.45022616F, 0.3762908F, 0.48424268F, 0.50512576F, 0.3432331F, 0.21785513F, 0.27181724F, 0.35682365F, 0.2539327F, 0.23764102F, 0.21785513F, 0.15035386F, 0.18596713F, 0.13072379F, 0F, 0.2567775F, 0.2857997F, 0.38406187F, 0.51164454F, 0.52343726F, 0.433382F, 0.49477893F, 0.5063136F, 0.41361052F, 0.4783104F, 0.42376858F, 0.57891214F, 0.57520616F, 0.5542661F, 0.50079215F, 0.41553798F, 0.4703391F, 0.39754495F, 0.4147148F, 0.31057525F, 0.48339984F, 0.5942762F, 0.45982966F, 0.4858182F, 0.5656339F, 0.5329256F, 0.69808996F, 0.64555866F, 0.5910132F, 0.51019377F }, new float[] { 0.3468458F, 0.35638872F, 0.3044892F, 0.51750845F, 0.54123116F, 0.41376394F, 0.32140726F, 0.44176278F, 0.45754513F, 0.28494364F, 0.17792262F, 0.2615722F, 0.31954432F, 0.21967457F, 0.20781784F, 0.1916024F, 0.2765296F, 0.31808093F, 0.2678998F, 0.2567775F, 0F, 0.11925662F, 0.23101072F, 0.34282342F, 0.35548326F, 0.25838542F, 0.34509853F, 0.34824762F, 0.32258937F, 0.37944773F, 0.36192048F, 0.54089993F, 0.5420854F, 0.49733672F, 0.4147148F, 0.36751336F, 0.43220484F, 0.35776848F, 0.35140887F, 0.25311938F, 0.4071078F, 0.5102871F, 0.38272563F, 0.4060441F, 0.49546304F, 0.46572745F, 0.5975118F, 0.5347789F, 0.48418862F, 0.43468082F }, new float[] { 0.39236432F, 0.40584695F, 0.34772614F, 0.55742186F, 0.5781015F, 0.45246965F, 0.36942804F, 0.47106573F, 0.49129534F, 0.32452178F, 0.20902468F, 0.2874837F, 0.36005095F, 0.24972986F, 0.25998363F, 0.22882488F, 0.31201184F, 0.36510888F, 0.30899435F, 0.2857997F, 0.11925662F, 0F, 0.19116549F, 0.2940744F, 0.31201184F, 0.21683657F, 0.2787526F, 0.2816524F, 0.38601664F, 0.44761422F, 0.4228177F, 0.5884339F, 0.58460206F, 0.5425346F, 0.46477047F, 0.4251904F, 0.5028532F, 0.42423323F, 0.41391554F, 0.3112428F, 0.44881815F, 0.54945004F, 0.44761422F, 0.46194527F, 0.56645614F, 0.53021824F, 0.6641129F, 0.60540247F, 0.55016F, 0.49272278F }, new float[] { 0.4968448F, 0.5317296F, 0.46461418F, 0.68233204F, 0.69184655F, 0.5739254F, 0.49129534F, 0.56730604F, 0.60765916F, 0.43220484F, 0.3233907F, 0.4047831F, 0.47048324F, 0.36740178F, 0.3540954F, 0.32500535F, 0.41267174F, 0.44766426F, 0.43348998F, 0.38406187F, 0.23101072F, 0.19116549F, 0F, 0.24598214F, 0.2650107F, 0.19278753F, 0.24810465F, 0.25893024F, 0.4559777F, 0.53904045F, 0.5170312F, 0.6894532F, 0.6642095F, 0.6287287F, 0.5598304F, 0.5077498F, 0.58596087F, 0.5326518F, 0.52479756F, 0.4150075F, 0.5813609F, 0.70960546F, 0.56318176F, 0.58802444F, 0.65037704F, 0.6235406F, 0.76936185F, 0.7085769F, 0.64584625F, 0.5855479F }, new float[] { 0.5781015F, 0.6035935F, 0.54682547F, 0.77977496F, 0.81764376F, 0.6682519F, 0.5689884F, 0.6809951F, 0.6977003F, 0.53602165F, 0.42535976F, 0.5068902F, 0.5689209F, 0.46445975F, 0.46461418F, 0.43113446F, 0.519941F, 0.5639885F, 0.5598888F, 0.51164454F, 0.34282342F, 0.2940744F, 0.24598214F, 0F, 0.058277003F, 0.15070212F, 0.30089107F, 0.31538117F, 0.54457086F, 0.6285784F, 0.59711F, 0.7816475F, 0.77915335F, 0.7460734F, 0.6487099F, 0.5996424F, 0.67837715F, 0.6483868F, 0.6260609F, 0.5184739F, 0.6666702F, 0.7721297F, 0.6646135F, 0.6926538F, 0.7745903F, 0.74367326F, 0.87747574F, 0.7985077F, 0.73360366F, 0.6853456F }, new float[] { 0.60791665F, 0.6343198F, 0.57144123F, 0.79580724F, 0.8343797F, 0.69664294F, 0.5902569F, 0.68579054F, 0.7025985F, 0.5441447F, 0.44645947F, 0.5381389F, 0.5939838F, 0.4903278F, 0.48312587F, 0.44887567F, 0.543684F, 0.5890075F, 0.5681079F, 0.52343726F, 0.35548326F, 0.31201184F, 0.2650107F, 0.058277003F, 0F, 0.162722F, 0.3124622F, 0.32716373F, 0.5648141F, 0.6419169F, 0.6235045F, 0.8041996F, 0.81259495F, 0.7956693F, 0.66726434F, 0.63054353F, 0.6977003F, 0.6666702F, 0.6393873F, 0.5381389F, 0.6759579F, 0.7721297F, 0.6692247F, 0.6974158F, 0.78514075F, 0.7538593F, 0.89534277F, 0.8094144F, 0.73360366F, 0.7044288F }, new float[] { 0.5024512F, 0.54593813F, 0.46976092F, 0.6625885F, 0.691027F, 0.5765171F, 0.49689957F, 0.6088107F, 0.6377795F, 0.46265346F, 0.3550001F, 0.44412684F, 0.5058914F, 0.3910618F, 0.38072535F, 0.34401548F, 0.4561819F, 0.4858182F, 0.46349338F, 0.433382F, 0.25838542F, 0.21683657F, 0.19278753F, 0.15070212F, 0.162722F, 0F, 0.23638393F, 0.24172956F, 0.5020542F, 0.5656339F, 0.5556077F, 0.6913153F, 0.707691F, 0.6708534F, 0.6007294F, 0.5335353F, 0.61513716F, 0.56728905F, 0.54279095F, 0.43345442F, 0.5840199F, 0.68491673F, 0.5656339F, 0.59501195F, 0.66775995F, 0.64470804F, 0.79579633F, 0.7277875F, 0.65846574F, 0.5840199F }, new float[] { 0.6017958F, 0.63685495F, 0.582298F, 0.80392224F, 0.7985077F, 0.68491673F, 0.6102063F, 0.6740886F, 0.7003367F, 0.54663527F, 0.4311837F, 0.53660625F, 0.6223058F, 0.50026846F, 0.45970434F, 0.44054696F, 0.51459503F, 0.56645614F, 0.5461341F, 0.49477893F, 0.34509853F, 0.2787526F, 0.24810465F, 0.30089107F, 0.3124622F, 0.23638393F, 0F, 0.06458046F, 0.60072064F, 0.6489399F, 0.6260609F, 0.767902F, 0.7985077F, 0.74885994F, 0.67929226F, 0.62861437F, 0.69546103F, 0.646409F, 0.6419169F, 0.52479756F, 0.6926538F, 0.82288677F, 0.6489399F, 0.6764165F, 0.7720249F, 0.75650704F, 0.898142F, 0.84002864F, 0.7825234F, 0.67852104F }, new float[] { 0.6017958F, 0.627956F, 0.5781015F, 0.7985077F, 0.7877765F, 0.68491673F, 0.59711F, 0.6599984F, 0.69546103F, 0.53446907F, 0.43819273F, 0.5287156F, 0.6266883F, 0.4964872F, 0.47067502F, 0.45484278F, 0.52628535F, 0.56235284F, 0.5461341F, 0.5063136F, 0.34824762F, 0.2816524F, 0.25893024F, 0.31538117F, 0.32716373F, 0.24172956F, 0.06458046F, 0F, 0.60072064F, 0.6489399F, 0.64413255F, 0.7733887F, 0.8041041F, 0.74885994F, 0.69847655F, 0.6376113F, 0.71017015F, 0.6600265F, 0.646409F, 0.52479756F, 0.7118596F, 0.8395179F, 0.6717765F, 0.6952272F, 0.7825234F, 0.76164955F, 0.9163907F, 0.8343797F, 0.77725863F, 0.70220405F }, new float[] { 0.37254572F, 0.38570487F, 0.3382648F, 0.529287F, 0.5533453F, 0.44173378F, 0.34027654F, 0.42395785F, 0.43936667F, 0.29993623F, 0.33798894F, 0.42770118F, 0.45833945F, 0.38272563F, 0.38239524F, 0.3522998F, 0.43233374F, 0.46810678F, 0.4150075F, 0.41361052F, 0.32258937F, 0.38601664F, 0.4559777F, 0.54457086F, 0.5648141F, 0.5020542F, 0.60072064F, 0.60072064F, 0F, 0.14973392F, 0.14337021F, 0.31371102F, 0.31129757F, 0.27517077F, 0.23158494F, 0.13120556F, 0.18603931F, 0.24753389F, 0.23922901F, 0.15326847F, 0.31729385F, 0.3926385F, 0.29558954F, 0.33179393F, 0.40584695F, 0.37909892F, 0.5006506F, 0.44771492F, 0.41610536F, 0.35140887F }, new float[] { 0.41955328F, 0.44409803F, 0.40691647F, 0.582298F, 0.60791665F, 0.5006506F, 0.40998384F, 0.47855452F, 0.47989392F, 0.356343F, 0.41282934F, 0.47414923F, 0.5141231F, 0.42656904F, 0.437011F, 0.4081772F, 0.52479756F, 0.5287156F, 0.47176966F, 0.4783104F, 0.37944773F, 0.44761422F, 0.53904045F, 0.6285784F, 0.6419169F, 0.5656339F, 0.6489399F, 0.6489399F, 0.14973392F, 0F, 0.21353894F, 0.3452338F, 0.37447318F, 0.32700533F, 0.30743062F, 0.19495197F, 0.24133666F, 0.32953385F, 0.31729385F, 0.22287752F, 0.3738876F, 0.45474908F, 0.3568624F, 0.3926385F, 0.47675538F, 0.45124578F, 0.59324914F, 0.54279095F, 0.4916881F, 0.41391554F }, new float[] { 0.40179005F, 0.4262568F, 0.37567452F, 0.5723839F, 0.5851852F, 0.46752155F, 0.39545622F, 0.4603466F, 0.48067284F, 0.35157353F, 0.36518776F, 0.44536993F, 0.47348353F, 0.40544564F, 0.40870708F, 0.38373375F, 0.4761275F, 0.47989392F, 0.45387766F, 0.42376858F, 0.36192048F, 0.4228177F, 0.5170312F, 0.59711F, 0.6235045F, 0.5556077F, 0.6260609F, 0.64413255F, 0.14337021F, 0.21353894F, 0F, 0.23207466F, 0.22005452F, 0.18636367F, 0.14097899F, 0.112857506F, 0.15892397F, 0.29993623F, 0.29390547F, 0.20316434F, 0.35310426F, 0.43698224F, 0.35219628F, 0.37838903F, 0.46622148F, 0.433382F, 0.5749097F, 0.53259486F, 0.47369763F, 0.39284208F }, new float[] { 0.5630252F, 0.5761489F, 0.5517826F, 0.7458554F, 0.7676444F, 0.64704436F, 0.5533453F, 0.630816F, 0.647367F, 0.5233773F, 0.54511356F, 0.63608617F, 0.6674829F, 0.5884339F, 0.5805686F, 0.54417944F, 0.63813096F, 0.6287287F, 0.59660316F, 0.57891214F, 0.54089993F, 0.5884339F, 0.6894532F, 0.7816475F, 0.8041996F, 0.6913153F, 0.767902F, 0.7733887F, 0.31371102F, 0.3452338F, 0.23207466F, 0F, 0.23598176F, 0.19617267F, 0.29537192F, 0.28040326F, 0.31923106F, 0.44310883F, 0.4356412F, 0.35092485F, 0.48541802F, 0.5536038F, 0.48008588F, 0.5079227F, 0.5761489F, 0.5543865F, 0.72736806F, 0.6708534F, 0.6121594F, 0.52169096F }, new float[] { 0.5511694F, 0.59887755F, 0.5444024F, 0.7439618F, 0.7492675F, 0.6280399F, 0.5289836F, 0.62140214F, 0.6566897F, 0.4922504F, 0.52565485F, 0.5863913F, 0.6385653F, 0.56307954F, 0.5386072F, 0.5328751F, 0.61045533F, 0.59702826F, 0.58819175F, 0.57520616F, 0.5420854F, 0.58460206F, 0.6642095F, 0.77915335F, 0.81259495F, 0.707691F, 0.7985077F, 0.8041041F, 0.31129757F, 0.37447318F, 0.22005452F, 0.23598176F, 0F, 0.1123272F, 0.26409414F, 0.27563617F, 0.32911408F, 0.46047997F, 0.46047997F, 0.35768837F, 0.52313095F, 0.6156692F, 0.5095364F, 0.52565485F, 0.603349F, 0.5856008F, 0.7361896F, 0.6898869F, 0.64466983F, 0.53954685F }, new float[] { 0.50989467F, 0.5432383F, 0.49919793F, 0.7218121F, 0.7113805F, 0.6022649F, 0.4959145F, 0.58625835F, 0.59728897F, 0.46388373F, 0.49334502F, 0.54842734F, 0.59474003F, 0.51758295F, 0.53899807F, 0.49625397F, 0.5984782F, 0.5805686F, 0.5543865F, 0.5542661F, 0.49733672F, 0.5425346F, 0.6287287F, 0.7460734F, 0.7956693F, 0.6708534F, 0.74885994F, 0.74885994F, 0.27517077F, 0.32700533F, 0.18636367F, 0.19617267F, 0.1123272F, 0F, 0.22928353F, 0.23768681F, 0.2892269F, 0.42208594F, 0.4184293F, 0.31889793F, 0.49479514F, 0.58138746F, 0.46592128F, 0.50134736F, 0.5604133F, 0.5432383F, 0.68857515F, 0.6582868F, 0.60492146F, 0.51502335F }, new float[] { 0.47989392F, 0.51851374F, 0.45881146F, 0.67361236F, 0.67837715F, 0.5689884F, 0.4590564F, 0.5622509F, 0.57674485F, 0.43693784F, 0.4357999F, 0.52343726F, 0.5540896F, 0.47964075F, 0.48367724F, 0.45263135F, 0.528924F, 0.5614761F, 0.5014294F, 0.50079215F, 0.4147148F, 0.46477047F, 0.5598304F, 0.6487099F, 0.66726434F, 0.6007294F, 0.67929226F, 0.69847655F, 0.23158494F, 0.30743062F, 0.14097899F, 0.29537192F, 0.26409414F, 0.22928353F, 0F, 0.2026584F, 0.26066962F, 0.37506872F, 0.3717618F, 0.28424212F, 0.44776616F, 0.5180079F, 0.4357999F, 0.46477047F, 0.55484366F, 0.51851374F, 0.65276337F, 0.6069541F, 0.5507296F, 0.46976092F }, new float[] { 0.41108263F, 0.4251042F, 0.38812768F, 0.570681F, 0.5749097F, 0.48503813F, 0.3806839F, 0.4590564F, 0.4603466F, 0.34412757F, 0.37409273F, 0.45503366F, 0.49477893F, 0.40780398F, 0.3972948F, 0.37273225F, 0.45628592F, 0.46734628F, 0.434595F, 0.41553798F, 0.36751336F, 0.4251904F, 0.5077498F, 0.5996424F, 0.63054353F, 0.5335353F, 0.62861437F, 0.6376113F, 0.13120556F, 0.19495197F, 0.112857506F, 0.28040326F, 0.27563617F, 0.23768681F, 0.2026584F, 0F, 0.14159384F, 0.2901881F, 0.28424212F, 0.18944806F, 0.34577733F, 0.4357999F, 0.33224562F, 0.36424342F, 0.4429708F, 0.40415993F, 0.54007345F, 0.49548635F, 0.45022616F, 0.36192048F }, new float[] { 0.46136555F, 0.46882904F, 0.4333451F, 0.6332034F, 0.6542634F, 0.5245316F, 0.4296333F, 0.5015908F, 0.52313095F, 0.39411807F, 0.43220484F, 0.51210856F, 0.5425605F, 0.47237796F, 0.47635955F, 0.44177756F, 0.51753247F, 0.5135785F, 0.5096429F, 0.4703391F, 0.43220484F, 0.5028532F, 0.58596087F, 0.67837715F, 0.6977003F, 0.61513716F, 0.69546103F, 0.71017015F, 0.18603931F, 0.24133666F, 0.15892397F, 0.31923106F, 0.32911408F, 0.2892269F, 0.26066962F, 0.14159384F, 0F, 0.31991807F, 0.31991807F, 0.23711571F, 0.40179005F, 0.48367724F, 0.38373375F, 0.40415993F, 0.49162608F, 0.47258583F, 0.59562844F, 0.543925F, 0.49936438F, 0.4121874F }, new float[] { 0.40012527F, 0.4276311F, 0.36143973F, 0.56728905F, 0.5798065F, 0.45370027F, 0.38037816F, 0.46864504F, 0.48503813F, 0.33479047F, 0.35140887F, 0.43936667F, 0.47783127F, 0.39700025F, 0.38008115F, 0.36281326F, 0.45124578F, 0.46938732F, 0.4299838F, 0.39754495F, 0.35776848F, 0.42423323F, 0.5326518F, 0.6483868F, 0.6666702F, 0.56728905F, 0.646409F, 0.6600265F, 0.24753389F, 0.32953385F, 0.29993623F, 0.44310883F, 0.46047997F, 0.42208594F, 0.37506872F, 0.2901881F, 0.31991807F, 0F, 0.10371195F, 0.17110679F, 0.32113266F, 0.41050464F, 0.30823418F, 0.3388368F, 0.40691647F, 0.3833881F, 0.5214165F, 0.45982966F, 0.4276311F, 0.3522998F }, new float[] { 0.37678742F, 0.41376394F, 0.36467868F, 0.54279095F, 0.57144123F, 0.45009372F, 0.37370783F, 0.46492872F, 0.4774608F, 0.33479047F, 0.34509853F, 0.4572131F, 0.4852441F, 0.4071078F, 0.37678742F, 0.36281326F, 0.44766426F, 0.48793F, 0.4299838F, 0.4147148F, 0.35140887F, 0.41391554F, 0.52479756F, 0.6260609F, 0.6393873F, 0.54279095F, 0.6419169F, 0.646409F, 0.23922901F, 0.31729385F, 0.29390547F, 0.4356412F, 0.46047997F, 0.4184293F, 0.3717618F, 0.28424212F, 0.31991807F, 0.10371195F, 0F, 0.16858272F, 0.3029931F, 0.38371354F, 0.29927534F, 0.32033655F, 0.41033313F, 0.37678742F, 0.5214165F, 0.46349338F, 0.42066854F, 0.32419598F }, new float[] { 0.2778719F, 0.30148768F, 0.24429101F, 0.42992717F, 0.46222335F, 0.3422716F, 0.25353214F, 0.360528F, 0.37136292F, 0.22266796F, 0.2503217F, 0.3365666F, 0.36740178F, 0.29335785F, 0.28664637F, 0.2685448F, 0.34368953F, 0.36281326F, 0.32808962F, 0.31057525F, 0.25311938F, 0.3112428F, 0.4150075F, 0.5184739F, 0.5381389F, 0.43345442F, 0.52479756F, 0.52479756F, 0.15326847F, 0.22287752F, 0.20316434F, 0.35092485F, 0.35768837F, 0.31889793F, 0.28424212F, 0.18944806F, 0.23711571F, 0.17110679F, 0.16858272F, 0F, 0.23428994F, 0.3264564F, 0.23374063F, 0.255927F, 0.3258188F, 0.30148768F, 0.442927F, 0.38639805F, 0.34456012F, 0.2765296F }, new float[] { 0.4241425F, 0.45246965F, 0.40117803F, 0.5840199F, 0.6228989F, 0.5020542F, 0.40415993F, 0.4874777F, 0.50818783F, 0.3703929F, 0.39365843F, 0.50166225F, 0.5272216F, 0.45958057F, 0.41720903F, 0.39571437F, 0.51459503F, 0.52237064F, 0.48046377F, 0.48339984F, 0.4071078F, 0.44881815F, 0.5813609F, 0.6666702F, 0.6759579F, 0.5840199F, 0.6926538F, 0.7118596F, 0.31729385F, 0.3738876F, 0.35310426F, 0.48541802F, 0.52313095F, 0.49479514F, 0.44776616F, 0.34577733F, 0.40179005F, 0.32113266F, 0.3029931F, 0.23428994F, 0F, 0.10712395F, 0.16282862F, 0.19073057F, 0.32193282F, 0.28888628F, 0.42066854F, 0.36236945F, 0.31582257F, 0.24198759F }, new float[] { 0.53021824F, 0.54212713F, 0.5083141F, 0.68966544F, 0.72364783F, 0.6061011F, 0.5014294F, 0.595317F, 0.619049F, 0.47106573F, 0.5064685F, 0.61360687F, 0.62919635F, 0.56972814F, 0.5461341F, 0.5208975F, 0.6154424F, 0.61979896F, 0.5607269F, 0.5942762F, 0.5102871F, 0.54945004F, 0.70960546F, 0.7721297F, 0.7721297F, 0.68491673F, 0.82288677F, 0.8395179F, 0.3926385F, 0.45474908F, 0.43698224F, 0.5536038F, 0.6156692F, 0.58138746F, 0.5180079F, 0.4357999F, 0.48367724F, 0.41050464F, 0.38371354F, 0.3264564F, 0.10712395F, 0F, 0.25192314F, 0.28319046F, 0.42883945F, 0.39134452F, 0.51459503F, 0.47196993F, 0.4150075F, 0.3505225F }, new float[] { 0.41610536F, 0.44409803F, 0.39338952F, 0.5992921F, 0.61226153F, 0.5006506F, 0.39284208F, 0.46734628F, 0.49513042F, 0.35310426F, 0.3893209F, 0.49272278F, 0.51797646F, 0.44406956F, 0.41610536F, 0.38470662F, 0.49786717F, 0.51701534F, 0.47176966F, 0.45982966F, 0.38272563F, 0.44761422F, 0.56318176F, 0.6646135F, 0.6692247F, 0.5656339F, 0.6489399F, 0.6717765F, 0.29558954F, 0.3568624F, 0.35219628F, 0.48008588F, 0.5095364F, 0.46592128F, 0.4357999F, 0.33224562F, 0.38373375F, 0.30823418F, 0.29927534F, 0.23374063F, 0.16282862F, 0.25192314F, 0F, 0.111990206F, 0.30899435F, 0.27076602F, 0.37909892F, 0.3454351F, 0.3029931F, 0.23047133F }, new float[] { 0.45124578F, 0.46572745F, 0.4241425F, 0.6210174F, 0.63879967F, 0.5317296F, 0.44176278F, 0.51310366F, 0.52645385F, 0.38608396F, 0.39931408F, 0.5194328F, 0.5375105F, 0.476526F, 0.43348998F, 0.4081772F, 0.5326518F, 0.55261064F, 0.49408904F, 0.4858182F, 0.4060441F, 0.46194527F, 0.58802444F, 0.6926538F, 0.6974158F, 0.59501195F, 0.6764165F, 0.6952272F, 0.33179393F, 0.3926385F, 0.37838903F, 0.5079227F, 0.52565485F, 0.50134736F, 0.46477047F, 0.36424342F, 0.40415993F, 0.3388368F, 0.32033655F, 0.255927F, 0.19073057F, 0.28319046F, 0.111990206F, 0F, 0.33345622F, 0.29112342F, 0.40584695F, 0.35821357F, 0.31504065F, 0.24141853F }, new float[] { 0.5034659F, 0.5347789F, 0.46717313F, 0.67715436F, 0.68188983F, 0.59000367F, 0.4979449F, 0.60951114F, 0.6247739F, 0.48259568F, 0.49546304F, 0.58478665F, 0.6393873F, 0.54212713F, 0.5268416F, 0.48312587F, 0.60791665F, 0.6210174F, 0.58651507F, 0.5656339F, 0.49546304F, 0.56645614F, 0.65037704F, 0.7745903F, 0.78514075F, 0.66775995F, 0.7720249F, 0.7825234F, 0.40584695F, 0.47675538F, 0.46622148F, 0.5761489F, 0.603349F, 0.5604133F, 0.55484366F, 0.4429708F, 0.49162608F, 0.40691647F, 0.41033313F, 0.3258188F, 0.32193282F, 0.42883945F, 0.30899435F, 0.33345622F, 0F, 0.0328019F, 0.3059881F, 0.25211424F, 0.20159338F, 0.2678998F }, new float[] { 0.47327211F, 0.50731725F, 0.44174817F, 0.64470804F, 0.64926976F, 0.5606773F, 0.47502482F, 0.5791595F, 0.5851852F, 0.45271376F, 0.46208346F, 0.5639885F, 0.61728925F, 0.52237064F, 0.49963197F, 0.45370027F, 0.58651507F, 0.6035935F, 0.5533453F, 0.5329256F, 0.46572745F, 0.53021824F, 0.6235406F, 0.74367326F, 0.7538593F, 0.64470804F, 0.75650704F, 0.76164955F, 0.37909892F, 0.45124578F, 0.433382F, 0.5543865F, 0.5856008F, 0.5432383F, 0.51851374F, 0.40415993F, 0.47258583F, 0.3833881F, 0.37678742F, 0.30148768F, 0.28888628F, 0.39134452F, 0.27076602F, 0.29112342F, 0.0328019F, 0F, 0.27076602F, 0.21633087F, 0.16569452F, 0.24812084F }, new float[] { 0.62924093F, 0.65183413F, 0.6178305F, 0.8345288F, 0.84591126F, 0.74080646F, 0.6202844F, 0.71480113F, 0.71213984F, 0.5894952F, 0.59324914F, 0.72364783F, 0.7720249F, 0.67339206F, 0.6427261F, 0.6097434F, 0.7359884F, 0.75120866F, 0.67292005F, 0.69808996F, 0.5975118F, 0.6641129F, 0.76936185F, 0.87747574F, 0.89534277F, 0.79579633F, 0.898142F, 0.9163907F, 0.5006506F, 0.59324914F, 0.5749097F, 0.72736806F, 0.7361896F, 0.68857515F, 0.65276337F, 0.54007345F, 0.59562844F, 0.5214165F, 0.5214165F, 0.442927F, 0.42066854F, 0.51459503F, 0.37909892F, 0.40584695F, 0.3059881F, 0.27076602F, 0F, 0.10641629F, 0.1660669F, 0.36281326F }, new float[] { 0.5598304F, 0.58924884F, 0.5409857F, 0.76901007F, 0.7743008F, 0.6625885F, 0.5631059F, 0.6470048F, 0.6443972F, 0.5260584F, 0.5387755F, 0.6656776F, 0.68233204F, 0.61410636F, 0.5765171F, 0.5581947F, 0.67715436F, 0.68665105F, 0.6538556F, 0.64555866F, 0.5347789F, 0.60540247F, 0.7085769F, 0.7985077F, 0.8094144F, 0.7277875F, 0.84002864F, 0.8343797F, 0.44771492F, 0.54279095F, 0.53259486F, 0.6708534F, 0.6898869F, 0.6582868F, 0.6069541F, 0.49548635F, 0.543925F, 0.45982966F, 0.46349338F, 0.38639805F, 0.36236945F, 0.47196993F, 0.3454351F, 0.35821357F, 0.25211424F, 0.21633087F, 0.10641629F, 0F, 0.10153881F, 0.30524287F }, new float[] { 0.51897776F, 0.54682547F, 0.4933935F, 0.7257026F, 0.7307085F, 0.62479216F, 0.5254962F, 0.6228535F, 0.6202844F, 0.4979449F, 0.5030639F, 0.61477685F, 0.6574804F, 0.57472205F, 0.54279095F, 0.5058914F, 0.64330286F, 0.6569543F, 0.60791665F, 0.5910132F, 0.48418862F, 0.55016F, 0.64584625F, 0.73360366F, 0.73360366F, 0.65846574F, 0.7825234F, 0.77725863F, 0.41610536F, 0.4916881F, 0.47369763F, 0.6121594F, 0.64466983F, 0.60492146F, 0.5507296F, 0.45022616F, 0.49936438F, 0.4276311F, 0.42066854F, 0.34456012F, 0.31582257F, 0.4150075F, 0.3029931F, 0.31504065F, 0.20159338F, 0.16569452F, 0.1660669F, 0.10153881F, 0F, 0.2565372F }, new float[] { 0.45607919F, 0.48552933F, 0.43229127F, 0.62732893F, 0.6317818F, 0.5332498F, 0.4429708F, 0.5224745F, 0.5200049F, 0.40415993F, 0.42077968F, 0.52479756F, 0.56318176F, 0.47783127F, 0.44529706F, 0.4230156F, 0.54212713F, 0.55016F, 0.51459503F, 0.51019377F, 0.43468082F, 0.49272278F, 0.5855479F, 0.6853456F, 0.7044288F, 0.5840199F, 0.67852104F, 0.70220405F, 0.35140887F, 0.41391554F, 0.39284208F, 0.52169096F, 0.53954685F, 0.51502335F, 0.46976092F, 0.36192048F, 0.4121874F, 0.3522998F, 0.32419598F, 0.2765296F, 0.24198759F, 0.3505225F, 0.23047133F, 0.24141853F, 0.2678998F, 0.24812084F, 0.36281326F, 0.30524287F, 0.2565372F, 0F } };
        private static float[][] FullDistMatJC = new float[][] { new float[] { 0F, 0.13602197F, 0.087217174F, 0.24854055F, 0.26942912F, 0.17130262F, 0.23758323F, 0.34278524F, 0.35842526F, 0.21684572F, 0.3171168F, 0.3971621F, 0.42091554F, 0.3456346F, 0.33655939F, 0.31581795F, 0.42621654F, 0.445393F, 0.40123564F, 0.39390513F, 0.3284214F, 0.36908174F, 0.4604767F, 0.52974296F, 0.5547679F, 0.4653062F, 0.5496474F, 0.5496474F, 0.35144234F, 0.39312226F, 0.3774367F, 0.5170094F, 0.50695825F, 0.47170663F, 0.44582886F, 0.3856521F, 0.42973867F, 0.37596264F, 0.3552259F, 0.26580074F, 0.3971621F, 0.489115F, 0.39008373F, 0.42091554F, 0.4661795F, 0.44008794F, 0.57253855F, 0.5143042F, 0.479499F, 0.42513272F }, new float[] { 0.13602197F, 0F, 0.10699582F, 0.2989221F, 0.30438423F, 0.2125818F, 0.2614672F, 0.36051515F, 0.37345484F, 0.23496616F, 0.33412457F, 0.40330705F, 0.43353403F, 0.35728583F, 0.35992363F, 0.33862478F, 0.445393F, 0.45839578F, 0.42938587F, 0.41894782F, 0.33698905F, 0.38102597F, 0.49040565F, 0.5511523F, 0.5767554F, 0.50251275F, 0.578858F, 0.57147074F, 0.36316547F, 0.4146686F, 0.39902154F, 0.5280968F, 0.54720306F, 0.5002159F, 0.4791014F, 0.398008F, 0.43622997F, 0.40022957F, 0.38801864F, 0.28738034F, 0.4219839F, 0.49927008F, 0.4146686F, 0.43353403F, 0.493008F, 0.4694919F, 0.591251F, 0.5391237F, 0.5032673F, 0.45070624F }, new float[] { 0.087217174F, 0.10699582F, 0F, 0.24137042F, 0.24910663F, 0.1528097F, 0.20711647F, 0.32042605F, 0.3298673F, 0.18449934F, 0.29011256F, 0.35316217F, 0.3819715F, 0.30946147F, 0.3032793F, 0.2860006F, 0.38691404F, 0.40534335F, 0.3718248F, 0.34952033F, 0.29011256F, 0.32921273F, 0.4325658F, 0.5032673F, 0.52412426F, 0.43703955F, 0.53327787F, 0.52974296F, 0.3206976F, 0.3819715F, 0.35423362F, 0.50747895F, 0.5012065F, 0.46250466F, 0.4275142F, 0.3653192F, 0.40524742F, 0.34151453F, 0.34441307F, 0.23486058F, 0.37689486F, 0.47034863F, 0.36999154F, 0.3971621F, 0.43479094F, 0.4126122F, 0.5630428F, 0.49829823F, 0.4574999F, 0.40432256F }, new float[] { 0.24854055F, 0.2989221F, 0.24137042F, 0F, 0.14320792F, 0.18526185F, 0.38049042F, 0.4502814F, 0.47149038F, 0.35633144F, 0.4518721F, 0.52412426F, 0.54038733F, 0.471579F, 0.48203787F, 0.4707244F, 0.54694533F, 0.5505596F, 0.5290776F, 0.5114614F, 0.4782398F, 0.5122631F, 0.6163223F, 0.69498307F, 0.707715F, 0.60011643F, 0.71413684F, 0.7098537F, 0.4883195F, 0.53327787F, 0.5249201F, 0.66785055F, 0.666328F, 0.64845717F, 0.60917616F, 0.5234822F, 0.575829F, 0.5206161F, 0.49983516F, 0.40224686F, 0.53472704F, 0.62231857F, 0.54755044F, 0.565698F, 0.61208105F, 0.5853618F, 0.7382206F, 0.68640095F, 0.65160424F, 0.57094955F }, new float[] { 0.26942912F, 0.30438423F, 0.24910663F, 0.14320792F, 0F, 0.18046084F, 0.4052798F, 0.480379F, 0.4953996F, 0.37439278F, 0.46826598F, 0.54905075F, 0.56936955F, 0.49850723F, 0.50251275F, 0.50461423F, 0.5688399F, 0.57997936F, 0.5651556F, 0.54359525F, 0.49850723F, 0.52974296F, 0.6240996F, 0.72496074F, 0.73810375F, 0.6234305F, 0.7098537F, 0.7013449F, 0.50880545F, 0.5547679F, 0.5357075F, 0.68531024F, 0.67059195F, 0.64000136F, 0.61308324F, 0.52705157F, 0.59325594F, 0.5311796F, 0.52412426F, 0.43048543F, 0.5672645F, 0.6499425F, 0.55839735F, 0.58046997F, 0.61596024F, 0.58913314F, 0.747122F, 0.69062227F, 0.6556485F, 0.5746489F }, new float[] { 0.17130262F, 0.2125818F, 0.1528097F, 0.18526185F, 0.18046084F, 0F, 0.29219636F, 0.398008F, 0.40842444F, 0.27020144F, 0.36110467F, 0.43895772F, 0.4604767F, 0.3910567F, 0.38788328F, 0.3778318F, 0.44978845F, 0.4661795F, 0.44978845F, 0.42002517F, 0.38801864F, 0.4219839F, 0.52622116F, 0.6047743F, 0.6280123F, 0.5284073F, 0.61843705F, 0.61843705F, 0.4125996F, 0.46375594F, 0.4350938F, 0.5872939F, 0.5715405F, 0.5500402F, 0.52205235F, 0.4502814F, 0.48425397F, 0.4230578F, 0.41990948F, 0.32430646F, 0.46496448F, 0.55325F, 0.46375594F, 0.49040565F, 0.53975785F, 0.5150215F, 0.6637891F, 0.60011643F, 0.5688399F, 0.4917033F }, new float[] { 0.23758323F, 0.2614672F, 0.20711647F, 0.38049042F, 0.4052798F, 0.29219636F, 0F, 0.2507779F, 0.2729231F, 0.11713792F, 0.29149842F, 0.3644086F, 0.39390513F, 0.31395146F, 0.31338593F, 0.2984925F, 0.37439278F, 0.40842444F, 0.3774367F, 0.35478315F, 0.30546924F, 0.34865853F, 0.4556888F, 0.52205235F, 0.53997064F, 0.46052393F, 0.5566811F, 0.54572153F, 0.32251006F, 0.3846818F, 0.3718248F, 0.50880545F, 0.48806024F, 0.45967457F, 0.42772758F, 0.35869756F, 0.40198874F, 0.35842526F, 0.3524794F, 0.24340515F, 0.3795339F, 0.46442658F, 0.36950576F, 0.41262498F, 0.46142495F, 0.4416085F, 0.5650875F, 0.5170777F, 0.48507902F, 0.4136823F }, new float[] { 0.34278524F, 0.36051515F, 0.32042605F, 0.4502814F, 0.480379F, 0.398008F, 0.2507779F, 0F, 0.12995414F, 0.14256445F, 0.39082074F, 0.46231943F, 0.4948562F, 0.41894782F, 0.41263792F, 0.3959078F, 0.4837828F, 0.49406797F, 0.46354058F, 0.44959334F, 0.41262498F, 0.43817273F, 0.5206305F, 0.6152277F, 0.6191517F, 0.5555151F, 0.6095669F, 0.5979838F, 0.39699963F, 0.44466847F, 0.42885143F, 0.57384694F, 0.5660184F, 0.53661F, 0.516354F, 0.42772758F, 0.46456552F, 0.43607014F, 0.4328394F, 0.34069812F, 0.4523908F, 0.54421794F, 0.43494144F, 0.47446185F, 0.55610037F, 0.5306345F, 0.64277685F, 0.58726114F, 0.5672267F, 0.48249364F }, new float[] { 0.35842526F, 0.37345484F, 0.3298673F, 0.47149038F, 0.4953996F, 0.40842444F, 0.2729231F, 0.12995414F, 0F, 0.1572183F, 0.4105267F, 0.47360778F, 0.5031055F, 0.43607014F, 0.41370183F, 0.4189999F, 0.4953996F, 0.5414649F, 0.48850676F, 0.46760753F, 0.42641068F, 0.4556888F, 0.5545527F, 0.6288742F, 0.6328632F, 0.5796245F, 0.6310219F, 0.6270487F, 0.4105267F, 0.44582886F, 0.44650343F, 0.5875606F, 0.59525704F, 0.5458716F, 0.5285993F, 0.42885143F, 0.48305544F, 0.4502814F, 0.44372064F, 0.3503865F, 0.47024018F, 0.56405836F, 0.45899835F, 0.48589802F, 0.56882477F, 0.5357075F, 0.6406177F, 0.58510464F, 0.5650875F, 0.480379F }, new float[] { 0.21684572F, 0.23496616F, 0.18449934F, 0.35633144F, 0.37439278F, 0.27020144F, 0.11713792F, 0.14256445F, 0.1572183F, 0F, 0.25878355F, 0.33195704F, 0.3664994F, 0.28872874F, 0.27971935F, 0.26812086F, 0.3533543F, 0.3774367F, 0.3474279F, 0.3251719F, 0.2722781F, 0.30828825F, 0.40424672F, 0.49406797F, 0.5009872F, 0.43085977F, 0.5031055F, 0.49274367F, 0.2859671F, 0.33694804F, 0.33266884F, 0.4832663F, 0.45651335F, 0.43193033F, 0.40839833F, 0.32597673F, 0.37063795F, 0.31756502F, 0.31756502F, 0.21477675F, 0.34952033F, 0.43817273F, 0.33404285F, 0.36350256F, 0.44816813F, 0.42219695F, 0.53933066F, 0.48555985F, 0.46142495F, 0.3795339F }, new float[] { 0.3171168F, 0.33412457F, 0.29011256F, 0.4518721F, 0.46826598F, 0.36110467F, 0.29149842F, 0.39082074F, 0.4105267F, 0.25878355F, 0F, 0.21246246F, 0.26864272F, 0.18002994F, 0.20339854F, 0.18325849F, 0.25927874F, 0.29420918F, 0.24358025F, 0.2102891F, 0.17280558F, 0.20203863F, 0.30726478F, 0.39823276F, 0.4167338F, 0.33574378F, 0.4033503F, 0.40949816F, 0.320449F, 0.38719395F, 0.34486842F, 0.50181144F, 0.48521474F, 0.45745808F, 0.40740067F, 0.35282278F, 0.40424672F, 0.33252102F, 0.32685018F, 0.2404393F, 0.37023014F, 0.4687622F, 0.36637935F, 0.3752441F, 0.45928526F, 0.43036366F, 0.542483F, 0.49641544F, 0.46583357F, 0.39420235F }, new float[] { 0.3971621F, 0.40330705F, 0.35316217F, 0.52412426F, 0.54905075F, 0.43895772F, 0.3644086F, 0.46231943F, 0.47360778F, 0.33195704F, 0.21246246F, 0F, 0.11121344F, 0.05293281F, 0.27383575F, 0.2519763F, 0.3171168F, 0.34853405F, 0.31431153F, 0.26024443F, 0.2508205F, 0.27460146F, 0.38008514F, 0.46912476F, 0.49587297F, 0.41469383F, 0.49456647F, 0.48783126F, 0.40029117F, 0.44084898F, 0.4157811F, 0.57822055F, 0.5367218F, 0.5046289F, 0.48331764F, 0.42422098F, 0.47360778F, 0.4105267F, 0.4261213F, 0.3191668F, 0.46462703F, 0.55952024F, 0.45692107F, 0.4798889F, 0.5353722F, 0.5178246F, 0.6499425F, 0.602658F, 0.56049645F, 0.48448145F }, new float[] { 0.42091554F, 0.43353403F, 0.3819715F, 0.54038733F, 0.56936955F, 0.4604767F, 0.39390513F, 0.4948562F, 0.5031055F, 0.3664994F, 0.26864272F, 0.11121344F, 0F, 0.110980295F, 0.3312687F, 0.3191668F, 0.3891156F, 0.40743825F, 0.3860959F, 0.33737898F, 0.30378187F, 0.34027088F, 0.4376669F, 0.52199537F, 0.54309946F, 0.46826598F, 0.5667708F, 0.5704169F, 0.42710292F, 0.47533664F, 0.44027138F, 0.60414225F, 0.5802757F, 0.543734F, 0.509437F, 0.45869517F, 0.499639F, 0.4440417F, 0.45045957F, 0.34684795F, 0.4865544F, 0.57250154F, 0.47864094F, 0.49533737F, 0.5809569F, 0.5625917F, 0.6888072F, 0.6163223F, 0.59590894F, 0.51714194F }, new float[] { 0.3456346F, 0.35728583F, 0.30946147F, 0.471579F, 0.49850723F, 0.3910567F, 0.31395146F, 0.41894782F, 0.43607014F, 0.28872874F, 0.18002994F, 0.05293281F, 0.110980295F, 0F, 0.23636596F, 0.22304447F, 0.29147613F, 0.32480314F, 0.28875095F, 0.24377501F, 0.21198638F, 0.23989224F, 0.34684795F, 0.43243146F, 0.4548533F, 0.36792547F, 0.46342683F, 0.4601684F, 0.36051515F, 0.39929605F, 0.38067108F, 0.538439F, 0.5170554F, 0.47830367F, 0.44560954F, 0.38275596F, 0.43931192F, 0.3731938F, 0.38214064F, 0.27996796F, 0.4281842F, 0.52267736F, 0.4146437F, 0.44291025F, 0.49927008F, 0.48240474F, 0.6089954F, 0.55993706F, 0.5268933F, 0.4440417F }, new float[] { 0.33655939F, 0.35992363F, 0.3032793F, 0.48203787F, 0.50251275F, 0.38788328F, 0.31338593F, 0.41263792F, 0.41370183F, 0.27971935F, 0.20339854F, 0.27383575F, 0.3312687F, 0.23636596F, 0F, 0.1291139F, 0.26252759F, 0.28943014F, 0.24935673F, 0.22869754F, 0.20090936F, 0.24935673F, 0.3349322F, 0.4325658F, 0.44862702F, 0.35873446F, 0.42829204F, 0.43783343F, 0.36022112F, 0.40846246F, 0.38355395F, 0.5318216F, 0.49627203F, 0.49660507F, 0.44910413F, 0.37345484F, 0.44276595F, 0.35816076F, 0.3552259F, 0.27383575F, 0.3910567F, 0.5026794F, 0.39008373F, 0.40537453F, 0.48622948F, 0.46287858F, 0.58372176F, 0.5284073F, 0.49983516F, 0.4157174F }, new float[] { 0.31581795F, 0.33862478F, 0.2860006F, 0.4707244F, 0.50461423F, 0.3778318F, 0.2984925F, 0.3959078F, 0.4189999F, 0.26812086F, 0.18325849F, 0.2519763F, 0.3191668F, 0.22304447F, 0.1291139F, 0F, 0.25139707F, 0.2833239F, 0.22813694F, 0.2102891F, 0.18569687F, 0.22050843F, 0.30872574F, 0.40330705F, 0.41884547F, 0.32587588F, 0.41156048F, 0.42405447F, 0.33332086F, 0.38308576F, 0.3614122F, 0.50101674F, 0.49138355F, 0.4599673F, 0.42212504F, 0.3516088F, 0.41263792F, 0.34274402F, 0.34274402F, 0.25723732F, 0.37205374F, 0.48114344F, 0.3622777F, 0.38308576F, 0.44862702F, 0.4230578F, 0.5562944F, 0.5129182F, 0.46826598F, 0.39617056F }, new float[] { 0.42621654F, 0.445393F, 0.38691404F, 0.54694533F, 0.5688399F, 0.44978845F, 0.37439278F, 0.4837828F, 0.4953996F, 0.3533543F, 0.25927874F, 0.3171168F, 0.3891156F, 0.29147613F, 0.26252759F, 0.25139707F, 0F, 0.16397338F, 0.18569687F, 0.14666292F, 0.2645698F, 0.29695007F, 0.38705486F, 0.48032418F, 0.5005952F, 0.4252223F, 0.47574154F, 0.48575392F, 0.40435985F, 0.48448145F, 0.4425648F, 0.57991576F, 0.5568891F, 0.54686844F, 0.48800933F, 0.425313F, 0.47826043F, 0.42091554F, 0.41778693F, 0.32558262F, 0.47574154F, 0.56105167F, 0.46135795F, 0.4911929F, 0.5547679F, 0.5368259F, 0.65990794F, 0.61208105F, 0.58419913F, 0.49927008F }, new float[] { 0.445393F, 0.45839578F, 0.40534335F, 0.5505596F, 0.57997936F, 0.4661795F, 0.40842444F, 0.49406797F, 0.5414649F, 0.3774367F, 0.29420918F, 0.34853405F, 0.40743825F, 0.32480314F, 0.28943014F, 0.2833239F, 0.16397338F, 0F, 0.21043143F, 0.18039285F, 0.30245575F, 0.34479785F, 0.41778693F, 0.5178246F, 0.53892094F, 0.45095608F, 0.5199119F, 0.5164403F, 0.4356024F, 0.48783126F, 0.44582886F, 0.5721129F, 0.54565305F, 0.5318216F, 0.51569796F, 0.43494144F, 0.47486934F, 0.436715F, 0.4527817F, 0.34274402F, 0.48240474F, 0.56468314F, 0.47781715F, 0.5081819F, 0.565698F, 0.5511523F, 0.6721503F, 0.6198553F, 0.5954752F, 0.50610095F }, new float[] { 0.40123564F, 0.42938587F, 0.3718248F, 0.5290776F, 0.5651556F, 0.44978845F, 0.3774367F, 0.46354058F, 0.48850676F, 0.3474279F, 0.24358025F, 0.31431153F, 0.3860959F, 0.28875095F, 0.24935673F, 0.22813694F, 0.18569687F, 0.21043143F, 0F, 0.12791307F, 0.25664428F, 0.29420918F, 0.40537453F, 0.51435363F, 0.5213083F, 0.4315907F, 0.5026794F, 0.5026794F, 0.3891156F, 0.43878388F, 0.4232126F, 0.5452966F, 0.5382354F, 0.509689F, 0.46442658F, 0.40634397F, 0.47149038F, 0.4022966F, 0.4022966F, 0.31151453F, 0.44632238F, 0.5150635F, 0.43878388F, 0.45810002F, 0.5368259F, 0.50880545F, 0.608608F, 0.59291947F, 0.5547679F, 0.47574154F }, new float[] { 0.39390513F, 0.41894782F, 0.34952033F, 0.5114614F, 0.54359525F, 0.42002517F, 0.35478315F, 0.44959334F, 0.46760753F, 0.3251719F, 0.2102891F, 0.26024443F, 0.33737898F, 0.24377501F, 0.22869754F, 0.2102891F, 0.14666292F, 0.18039285F, 0.12791307F, 0F, 0.24640042F, 0.27306134F, 0.36170414F, 0.47320935F, 0.48331764F, 0.4052798F, 0.45869517F, 0.46862903F, 0.38788328F, 0.44445696F, 0.39683312F, 0.5304261F, 0.52730167F, 0.5095868F, 0.46387783F, 0.3895834F, 0.43754172F, 0.37367657F, 0.38885745F, 0.29564548F, 0.44886407F, 0.54334486F, 0.42840117F, 0.45095608F, 0.51921654F, 0.4914266F, 0.6291917F, 0.58606535F, 0.5406058F, 0.47196355F }, new float[] { 0.3284214F, 0.33698905F, 0.29011256F, 0.4782398F, 0.49850723F, 0.38801864F, 0.30546924F, 0.41262498F, 0.42641068F, 0.2722781F, 0.17280558F, 0.2508205F, 0.30378187F, 0.21198638F, 0.20090936F, 0.18569687F, 0.2645698F, 0.30245575F, 0.25664428F, 0.24640042F, 0F, 0.11690709F, 0.22254077F, 0.32480314F, 0.3361771F, 0.2478834F, 0.32685018F, 0.3296814F, 0.30653948F, 0.35759658F, 0.3419449F, 0.49822518F, 0.49923456F, 0.46090072F, 0.38885745F, 0.34694767F, 0.40424672F, 0.3382259F, 0.33252102F, 0.24302399F, 0.38214064F, 0.47204372F, 0.36051515F, 0.38120025F, 0.45928526F, 0.43353403F, 0.5460584F, 0.493008F, 0.44954658F, 0.40641925F }, new float[] { 0.36908174F, 0.38102597F, 0.32921273F, 0.5122631F, 0.52974296F, 0.4219839F, 0.34865853F, 0.43817273F, 0.4556888F, 0.30828825F, 0.20203863F, 0.27460146F, 0.34027088F, 0.23989224F, 0.24935673F, 0.22050843F, 0.29695007F, 0.34479785F, 0.29420918F, 0.27306134F, 0.11690709F, 0F, 0.18528597F, 0.28062198F, 0.29695007F, 0.20933855F, 0.26660815F, 0.26926512F, 0.3634427F, 0.4177432F, 0.39599642F, 0.538439F, 0.53521687F, 0.49961695F, 0.43270174F, 0.3980838F, 0.46565223F, 0.39724192F, 0.3881524F, 0.29625177F, 0.41879523F, 0.5054979F, 0.4177432F, 0.43024337F, 0.5199119F, 0.489115F, 0.60137093F, 0.55266565F, 0.50610095F, 0.45692107F }, new float[] { 0.4604767F, 0.49040565F, 0.4325658F, 0.6163223F, 0.6240996F, 0.52622116F, 0.4556888F, 0.5206305F, 0.5545527F, 0.40424672F, 0.30726478F, 0.38008514F, 0.4376669F, 0.34684795F, 0.3349322F, 0.30872574F, 0.38705486F, 0.41778693F, 0.40537453F, 0.36170414F, 0.22254077F, 0.18528597F, 0F, 0.23642597F, 0.25398654F, 0.18681121F, 0.23838955F, 0.24838571F, 0.42504424F, 0.49664122F, 0.47783068F, 0.6221452F, 0.6014504F, 0.5721129F, 0.5143042F, 0.46986368F, 0.53635985F, 0.4911929F, 0.48448145F, 0.3891156F, 0.5324888F, 0.63856006F, 0.51714194F, 0.5380948F, 0.5900478F, 0.56779855F, 0.6866818F, 0.6377245F, 0.58630323F, 0.53601253F }, new float[] { 0.52974296F, 0.5511523F, 0.5032673F, 0.69498307F, 0.72496074F, 0.6047743F, 0.52205235F, 0.6152277F, 0.6288742F, 0.49406797F, 0.39823276F, 0.46912476F, 0.52199537F, 0.43243146F, 0.4325658F, 0.40330705F, 0.48032418F, 0.5178246F, 0.51435363F, 0.47320935F, 0.32480314F, 0.28062198F, 0.23642597F, 0F, 0.05770199F, 0.14699453F, 0.28683695F, 0.3000078F, 0.5013498F, 0.57198805F, 0.54572153F, 0.6964732F, 0.6944882F, 0.6680258F, 0.5886705F, 0.54784393F, 0.61308324F, 0.5884035F, 0.5698952F, 0.4790673F, 0.6034742F, 0.68889076F, 0.60178274F, 0.6247585F, 0.69085306F, 0.6660959F, 0.7716498F, 0.7098537F, 0.6579849F, 0.6187878F }, new float[] { 0.5547679F, 0.5767554F, 0.52412426F, 0.707715F, 0.73810375F, 0.6280123F, 0.53997064F, 0.6191517F, 0.6328632F, 0.5009872F, 0.4167338F, 0.49587297F, 0.54309946F, 0.4548533F, 0.44862702F, 0.41884547F, 0.5005952F, 0.53892094F, 0.5213083F, 0.48331764F, 0.3361771F, 0.29695007F, 0.25398654F, 0.05770199F, 0F, 0.15841843F, 0.297359F, 0.3106776F, 0.5185231F, 0.58305186F, 0.5677685F, 0.714356F, 0.72098315F, 0.7076057F, 0.6039626F, 0.5736207F, 0.6288742F, 0.6034742F, 0.5809569F, 0.49587297F, 0.61110014F, 0.68889076F, 0.60557365F, 0.6286423F, 0.6992509F, 0.6742768F, 0.78543144F, 0.71847445F, 0.6579849F, 0.6343524F }, new float[] { 0.4653062F, 0.50251275F, 0.43703955F, 0.60011643F, 0.6234305F, 0.5284073F, 0.46052393F, 0.5555151F, 0.5796245F, 0.43085977F, 0.33574378F, 0.41469383F, 0.46826598F, 0.36792547F, 0.35873446F, 0.32587588F, 0.4252223F, 0.45095608F, 0.4315907F, 0.4052798F, 0.2478834F, 0.20933855F, 0.18681121F, 0.14699453F, 0.15841843F, 0F, 0.22753115F, 0.23248811F, 0.46496448F, 0.51921654F, 0.51072484F, 0.62366587F, 0.6370047F, 0.6069114F, 0.54875445F, 0.49194697F, 0.56079704F, 0.5206161F, 0.49983516F, 0.40534335F, 0.53472704F, 0.61843705F, 0.51921654F, 0.5439621F, 0.60437F, 0.5853618F, 0.70770633F, 0.6532894F, 0.596721F, 0.53472704F }, new float[] { 0.5496474F, 0.578858F, 0.53327787F, 0.71413684F, 0.7098537F, 0.61843705F, 0.5566811F, 0.6095669F, 0.6310219F, 0.5031055F, 0.4033503F, 0.49456647F, 0.5667708F, 0.46342683F, 0.42829204F, 0.41156048F, 0.47574154F, 0.5199119F, 0.5026794F, 0.45869517F, 0.32685018F, 0.26660815F, 0.23838955F, 0.28683695F, 0.297359F, 0.22753115F, 0F, 0.06387618F, 0.5487471F, 0.5888606F, 0.5698952F, 0.68551606F, 0.7098537F, 0.6702646F, 0.613833F, 0.57201797F, 0.6270487F, 0.58676857F, 0.58305186F, 0.48448145F, 0.6247585F, 0.72908515F, 0.5888606F, 0.6114762F, 0.6888072F, 0.67639947F, 0.78758395F, 0.74252534F, 0.6971699F, 0.61320114F }, new float[] { 0.5496474F, 0.57147074F, 0.52974296F, 0.7098537F, 0.7013449F, 0.61843705F, 0.54572153F, 0.5979838F, 0.6270487F, 0.49274367F, 0.40949816F, 0.48783126F, 0.5704169F, 0.4601684F, 0.43783343F, 0.42405447F, 0.48575392F, 0.5164403F, 0.5026794F, 0.46862903F, 0.3296814F, 0.26926512F, 0.24838571F, 0.3000078F, 0.3106776F, 0.23248811F, 0.06387618F, 0F, 0.5487471F, 0.5888606F, 0.58488566F, 0.689895F, 0.71428055F, 0.6702646F, 0.6295067F, 0.57948506F, 0.6390186F, 0.5980069F, 0.58676857F, 0.48448145F, 0.6403903F, 0.74212587F, 0.60766935F, 0.626858F, 0.6971699F, 0.68051744F, 0.8015719F, 0.73810375F, 0.69297934F, 0.6325422F }, new float[] { 0.35144234F, 0.36316547F, 0.3206976F, 0.4883195F, 0.50880545F, 0.4125996F, 0.32251006F, 0.39699963F, 0.4105267F, 0.2859671F, 0.320449F, 0.40029117F, 0.42710292F, 0.36051515F, 0.36022112F, 0.33332086F, 0.40435985F, 0.4356024F, 0.3891156F, 0.38788328F, 0.30653948F, 0.3634427F, 0.42504424F, 0.5013498F, 0.5185231F, 0.46496448F, 0.5487471F, 0.5487471F, 0F, 0.14607249F, 0.14000544F, 0.2984925F, 0.2963015F, 0.26332316F, 0.22307445F, 0.1283746F, 0.18046084F, 0.23786163F, 0.23017032F, 0.14943716F, 0.3017423F, 0.3693251F, 0.28200442F, 0.31486073F, 0.38102597F, 0.35728583F, 0.46375594F, 0.4178312F, 0.39008373F, 0.33252102F }, new float[] { 0.39312226F, 0.4146686F, 0.3819715F, 0.53327787F, 0.5547679F, 0.46375594F, 0.3846818F, 0.44466847F, 0.44582886F, 0.33694804F, 0.38719395F, 0.44084898F, 0.47533664F, 0.39929605F, 0.40846246F, 0.38308576F, 0.48448145F, 0.48783126F, 0.43878388F, 0.44445696F, 0.35759658F, 0.4177432F, 0.49664122F, 0.57198805F, 0.58305186F, 0.51921654F, 0.5888606F, 0.5888606F, 0.14607249F, 0F, 0.2062591F, 0.32697186F, 0.35316217F, 0.3105344F, 0.29278788F, 0.18884532F, 0.23212405F, 0.31281954F, 0.3017423F, 0.21497202F, 0.35263976F, 0.42397276F, 0.3374137F, 0.3693251F, 0.44310912F, 0.42091554F, 0.542483F, 0.49983516F, 0.45602793F, 0.3881524F }, new float[] { 0.3774367F, 0.39902154F, 0.35423362F, 0.5249201F, 0.5357075F, 0.4350938F, 0.3718248F, 0.42885143F, 0.44650343F, 0.33266884F, 0.34486842F, 0.4157811F, 0.44027138F, 0.38067108F, 0.38355395F, 0.3614122F, 0.4425648F, 0.44582886F, 0.4232126F, 0.39683312F, 0.3419449F, 0.39599642F, 0.47783068F, 0.54572153F, 0.5677685F, 0.51072484F, 0.5698952F, 0.58488566F, 0.14000544F, 0.2062591F, 0F, 0.22352953F, 0.2123407F, 0.18076636F, 0.13772261F, 0.11074813F, 0.15481324F, 0.2859671F, 0.2804678F, 0.19655122F, 0.33404285F, 0.40843725F, 0.3332279F, 0.35665336F, 0.43396363F, 0.4052798F, 0.52705157F, 0.49114433F, 0.44045717F, 0.36950576F }, new float[] { 0.5170094F, 0.5280968F, 0.50747895F, 0.66785055F, 0.68531024F, 0.5872939F, 0.50880545F, 0.57384694F, 0.5875606F, 0.4832663F, 0.50181144F, 0.57822055F, 0.60414225F, 0.538439F, 0.5318216F, 0.50101674F, 0.57991576F, 0.5721129F, 0.5452966F, 0.5304261F, 0.49822518F, 0.538439F, 0.6221452F, 0.6964732F, 0.714356F, 0.62366587F, 0.68551606F, 0.689895F, 0.2984925F, 0.32697186F, 0.22352953F, 0F, 0.2271579F, 0.18999192F, 0.2818059F, 0.26812086F, 0.30349803F, 0.4138031F, 0.40726152F, 0.33208638F, 0.45060998F, 0.50902486F, 0.44599512F, 0.47001228F, 0.5280968F, 0.509689F, 0.6529504F, 0.6069114F, 0.55831206F, 0.48182285F }, new float[] { 0.50695825F, 0.54720306F, 0.5012065F, 0.666328F, 0.67059195F, 0.5715405F, 0.48806024F, 0.5660184F, 0.59525704F, 0.45651335F, 0.48521474F, 0.5367218F, 0.5802757F, 0.5170554F, 0.49627203F, 0.49138355F, 0.5568891F, 0.54565305F, 0.5382354F, 0.52730167F, 0.49923456F, 0.53521687F, 0.6014504F, 0.6944882F, 0.72098315F, 0.6370047F, 0.7098537F, 0.71428055F, 0.2963015F, 0.35316217F, 0.2123407F, 0.2271579F, 0F, 0.11023717F, 0.25314292F, 0.26375017F, 0.31244028F, 0.42896757F, 0.42896757F, 0.33815408F, 0.48305544F, 0.5612408F, 0.47139883F, 0.48521474F, 0.5509476F, 0.536057F, 0.6600701F, 0.62249947F, 0.5853301F, 0.49707267F }, new float[] { 0.47170663F, 0.5002159F, 0.46250466F, 0.64845717F, 0.64000136F, 0.5500402F, 0.45967457F, 0.53661F, 0.5458716F, 0.43193033F, 0.45745808F, 0.5046289F, 0.543734F, 0.47830367F, 0.49660507F, 0.4599673F, 0.54686844F, 0.5318216F, 0.509689F, 0.5095868F, 0.46090072F, 0.49961695F, 0.5721129F, 0.6680258F, 0.7076057F, 0.6069114F, 0.6702646F, 0.6702646F, 0.26332316F, 0.3105344F, 0.18076636F, 0.18999192F, 0.11023717F, 0F, 0.22093496F, 0.22874002F, 0.27619496F, 0.39535236F, 0.39213204F, 0.3031962F, 0.45870918F, 0.53251123F, 0.4337026F, 0.46435592F, 0.5147979F, 0.5002159F, 0.62142783F, 0.5965736F, 0.5522633F, 0.47610894F }, new float[] { 0.44582886F, 0.4791014F, 0.4275142F, 0.60917616F, 0.61308324F, 0.52205235F, 0.42772758F, 0.516354F, 0.5285993F, 0.40839833F, 0.40740067F, 0.48331764F, 0.509437F, 0.44560954F, 0.44910413F, 0.42212504F, 0.48800933F, 0.51569796F, 0.46442658F, 0.46387783F, 0.38885745F, 0.43270174F, 0.5143042F, 0.5886705F, 0.6039626F, 0.54875445F, 0.613833F, 0.6295067F, 0.22307445F, 0.29278788F, 0.13772261F, 0.2818059F, 0.25314292F, 0.22093496F, 0F, 0.19607703F, 0.24998891F, 0.3536934F, 0.3507426F, 0.27163616F, 0.417876F, 0.47866786F, 0.40740067F, 0.43270174F, 0.51007676F, 0.4791014F, 0.5920181F, 0.55396324F, 0.50658476F, 0.43703955F }, new float[] { 0.3856521F, 0.398008F, 0.3653192F, 0.5234822F, 0.52705157F, 0.4502814F, 0.35869756F, 0.42772758F, 0.42885143F, 0.32597673F, 0.35282278F, 0.42422098F, 0.45869517F, 0.38275596F, 0.37345484F, 0.3516088F, 0.425313F, 0.43494144F, 0.40634397F, 0.3895834F, 0.34694767F, 0.3980838F, 0.46986368F, 0.54784393F, 0.5736207F, 0.49194697F, 0.57201797F, 0.57948506F, 0.1283746F, 0.18884532F, 0.11074813F, 0.26812086F, 0.26375017F, 0.22874002F, 0.19607703F, 0F, 0.13830975F, 0.2770733F, 0.27163616F, 0.18367024F, 0.32746068F, 0.40740067F, 0.31526852F, 0.3440237F, 0.4136823F, 0.3795339F, 0.49752125F, 0.45930535F, 0.42002517F, 0.3419449F }, new float[] { 0.42973867F, 0.43622997F, 0.40524742F, 0.575829F, 0.59325594F, 0.48425397F, 0.40198874F, 0.46456552F, 0.48305544F, 0.37063795F, 0.40424672F, 0.47360778F, 0.499639F, 0.43931192F, 0.44276595F, 0.41263792F, 0.47826043F, 0.47486934F, 0.47149038F, 0.43754172F, 0.40424672F, 0.46565223F, 0.53635985F, 0.61308324F, 0.6288742F, 0.56079704F, 0.6270487F, 0.6390186F, 0.18046084F, 0.23212405F, 0.15481324F, 0.30349803F, 0.31244028F, 0.27619496F, 0.24998891F, 0.13830975F, 0F, 0.30412048F, 0.30412048F, 0.22821018F, 0.3774367F, 0.44910413F, 0.3614122F, 0.3795339F, 0.45597437F, 0.43949234F, 0.5444792F, 0.50080025F, 0.46264806F, 0.38662738F }, new float[] { 0.37596264F, 0.40022957F, 0.34151453F, 0.5206161F, 0.5311796F, 0.4230578F, 0.35842526F, 0.43607014F, 0.4502814F, 0.31756502F, 0.33252102F, 0.4105267F, 0.4440417F, 0.3731938F, 0.35816076F, 0.34274402F, 0.42091554F, 0.436715F, 0.4022966F, 0.37367657F, 0.3382259F, 0.39724192F, 0.4911929F, 0.5884035F, 0.6034742F, 0.5206161F, 0.58676857F, 0.5980069F, 0.23786163F, 0.31281954F, 0.2859671F, 0.4138031F, 0.42896757F, 0.39535236F, 0.3536934F, 0.2770733F, 0.30412048F, 0F, 0.10192419F, 0.1663627F, 0.30522057F, 0.38514173F, 0.2935183F, 0.32121304F, 0.3819715F, 0.36110467F, 0.48158786F, 0.42840117F, 0.40022957F, 0.33332086F }, new float[] { 0.3552259F, 0.38801864F, 0.34441307F, 0.49983516F, 0.52412426F, 0.41990948F, 0.3524794F, 0.4328394F, 0.44372064F, 0.31756502F, 0.32685018F, 0.4261213F, 0.45045957F, 0.38214064F, 0.3552259F, 0.34274402F, 0.41778693F, 0.4527817F, 0.4022966F, 0.38885745F, 0.33252102F, 0.3881524F, 0.48448145F, 0.5698952F, 0.5809569F, 0.49983516F, 0.58305186F, 0.58676857F, 0.23017032F, 0.3017423F, 0.2804678F, 0.40726152F, 0.42896757F, 0.39213204F, 0.3507426F, 0.27163616F, 0.30412048F, 0.10192419F, 0F, 0.16397338F, 0.28875095F, 0.36139426F, 0.28536493F, 0.30449954F, 0.38499025F, 0.3552259F, 0.48158786F, 0.4315907F, 0.39410448F, 0.3079935F }, new float[] { 0.26580074F, 0.28738034F, 0.23486058F, 0.40224686F, 0.43048543F, 0.32430646F, 0.24340515F, 0.34069812F, 0.3503865F, 0.21477675F, 0.2404393F, 0.3191668F, 0.34684795F, 0.27996796F, 0.27383575F, 0.25723732F, 0.32558262F, 0.34274402F, 0.31151453F, 0.29564548F, 0.24302399F, 0.29625177F, 0.3891156F, 0.4790673F, 0.49587297F, 0.40534335F, 0.48448145F, 0.48448145F, 0.14943716F, 0.21497202F, 0.19655122F, 0.33208638F, 0.33815408F, 0.3031962F, 0.27163616F, 0.18367024F, 0.22821018F, 0.1663627F, 0.16397338F, 0F, 0.2255873F, 0.31003806F, 0.22507715F, 0.24561572F, 0.30946147F, 0.28738034F, 0.413644F, 0.3637818F, 0.32636586F, 0.2645698F }, new float[] { 0.3971621F, 0.4219839F, 0.37689486F, 0.53472704F, 0.5672645F, 0.46496448F, 0.3795339F, 0.4523908F, 0.47024018F, 0.34952033F, 0.37023014F, 0.46462703F, 0.4865544F, 0.4281842F, 0.3910567F, 0.37205374F, 0.47574154F, 0.48240474F, 0.44632238F, 0.44886407F, 0.38214064F, 0.41879523F, 0.5324888F, 0.6034742F, 0.61110014F, 0.53472704F, 0.6247585F, 0.6403903F, 0.3017423F, 0.35263976F, 0.33404285F, 0.45060998F, 0.48305544F, 0.45870918F, 0.417876F, 0.32746068F, 0.3774367F, 0.30522057F, 0.28875095F, 0.2255873F, 0F, 0.105219185F, 0.15851958F, 0.18487687F, 0.3059451F, 0.27588364F, 0.39410448F, 0.3423468F, 0.30040815F, 0.23272717F }, new float[] { 0.489115F, 0.49927008F, 0.47034863F, 0.62231857F, 0.6499425F, 0.55325F, 0.46442658F, 0.54421794F, 0.56405836F, 0.43817273F, 0.4687622F, 0.55952024F, 0.57250154F, 0.52267736F, 0.5026794F, 0.48114344F, 0.56105167F, 0.56468314F, 0.5150635F, 0.54334486F, 0.47204372F, 0.5054979F, 0.63856006F, 0.68889076F, 0.68889076F, 0.61843705F, 0.72908515F, 0.74212587F, 0.3693251F, 0.42397276F, 0.40843725F, 0.50902486F, 0.5612408F, 0.53251123F, 0.47866786F, 0.40740067F, 0.44910413F, 0.38514173F, 0.36139426F, 0.31003806F, 0.105219185F, 0F, 0.2419191F, 0.2706735F, 0.40129137F, 0.36817646F, 0.47574154F, 0.43895772F, 0.3891156F, 0.33172506F }, new float[] { 0.39008373F, 0.4146686F, 0.36999154F, 0.54755044F, 0.55839735F, 0.46375594F, 0.36950576F, 0.43494144F, 0.45899835F, 0.33404285F, 0.36637935F, 0.45692107F, 0.47864094F, 0.4146437F, 0.39008373F, 0.3622777F, 0.46135795F, 0.47781715F, 0.43878388F, 0.42840117F, 0.36051515F, 0.4177432F, 0.51714194F, 0.60178274F, 0.60557365F, 0.51921654F, 0.5888606F, 0.60766935F, 0.28200442F, 0.3374137F, 0.3332279F, 0.44599512F, 0.47139883F, 0.4337026F, 0.40740067F, 0.31526852F, 0.3614122F, 0.2935183F, 0.28536493F, 0.22507715F, 0.15851958F, 0.2419191F, 0F, 0.10991242F, 0.29420918F, 0.25927874F, 0.35728583F, 0.32715294F, 0.28875095F, 0.22203937F }, new float[] { 0.42091554F, 0.43353403F, 0.3971621F, 0.565698F, 0.58046997F, 0.49040565F, 0.41262498F, 0.47446185F, 0.48589802F, 0.36350256F, 0.3752441F, 0.4798889F, 0.49533737F, 0.44291025F, 0.40537453F, 0.38308576F, 0.4911929F, 0.5081819F, 0.45810002F, 0.45095608F, 0.38120025F, 0.43024337F, 0.5380948F, 0.6247585F, 0.6286423F, 0.5439621F, 0.6114762F, 0.626858F, 0.31486073F, 0.3693251F, 0.35665336F, 0.47001228F, 0.48521474F, 0.46435592F, 0.43270174F, 0.3440237F, 0.3795339F, 0.32121304F, 0.30449954F, 0.24561572F, 0.18487687F, 0.2706735F, 0.10991242F, 0F, 0.31636116F, 0.27792773F, 0.38102597F, 0.33862478F, 0.29969892F, 0.2321999F }, new float[] { 0.4661795F, 0.493008F, 0.43479094F, 0.61208105F, 0.61596024F, 0.53975785F, 0.46142495F, 0.55610037F, 0.56882477F, 0.44816813F, 0.45928526F, 0.5353722F, 0.5809569F, 0.49927008F, 0.48622948F, 0.44862702F, 0.5547679F, 0.565698F, 0.5368259F, 0.51921654F, 0.45928526F, 0.5199119F, 0.5900478F, 0.69085306F, 0.6992509F, 0.60437F, 0.6888072F, 0.6971699F, 0.38102597F, 0.44310912F, 0.43396363F, 0.5280968F, 0.5509476F, 0.5147979F, 0.51007676F, 0.4136823F, 0.45597437F, 0.3819715F, 0.38499025F, 0.30946147F, 0.3059451F, 0.40129137F, 0.29420918F, 0.31636116F, 0F, 0.03261773F, 0.29147613F, 0.24209562F, 0.19507861F, 0.25664428F }, new float[] { 0.44008794F, 0.4694919F, 0.4126122F, 0.5853618F, 0.58913314F, 0.5150215F, 0.4416085F, 0.5306345F, 0.5357075F, 0.42219695F, 0.43036366F, 0.5178246F, 0.5625917F, 0.48240474F, 0.46287858F, 0.4230578F, 0.5368259F, 0.5511523F, 0.50880545F, 0.4914266F, 0.43353403F, 0.489115F, 0.56779855F, 0.6660959F, 0.6742768F, 0.5853618F, 0.67639947F, 0.68051744F, 0.35728583F, 0.42091554F, 0.4052798F, 0.509689F, 0.536057F, 0.5002159F, 0.4791014F, 0.3795339F, 0.43949234F, 0.36110467F, 0.3552259F, 0.28738034F, 0.27588364F, 0.36817646F, 0.25927874F, 0.27792773F, 0.03261773F, 0F, 0.25927874F, 0.2088665F, 0.1612371F, 0.23840453F }, new float[] { 0.57253855F, 0.591251F, 0.5630428F, 0.7382206F, 0.747122F, 0.6637891F, 0.5650875F, 0.64277685F, 0.6406177F, 0.53933066F, 0.542483F, 0.6499425F, 0.6888072F, 0.6089954F, 0.58372176F, 0.5562944F, 0.65990794F, 0.6721503F, 0.608608F, 0.6291917F, 0.5460584F, 0.60137093F, 0.6866818F, 0.7716498F, 0.78543144F, 0.70770633F, 0.78758395F, 0.8015719F, 0.46375594F, 0.542483F, 0.52705157F, 0.6529504F, 0.6600701F, 0.62142783F, 0.5920181F, 0.49752125F, 0.5444792F, 0.48158786F, 0.48158786F, 0.413644F, 0.39410448F, 0.47574154F, 0.35728583F, 0.38102597F, 0.29147613F, 0.25927874F, 0F, 0.10453609F, 0.16159004F, 0.34274402F }, new float[] { 0.5143042F, 0.5391237F, 0.49829823F, 0.68640095F, 0.69062227F, 0.60011643F, 0.5170777F, 0.58726114F, 0.58510464F, 0.48555985F, 0.49641544F, 0.602658F, 0.6163223F, 0.55993706F, 0.5284073F, 0.5129182F, 0.61208105F, 0.6198553F, 0.59291947F, 0.58606535F, 0.493008F, 0.55266565F, 0.6377245F, 0.7098537F, 0.71847445F, 0.6532894F, 0.74252534F, 0.73810375F, 0.4178312F, 0.49983516F, 0.49114433F, 0.6069114F, 0.62249947F, 0.5965736F, 0.55396324F, 0.45930535F, 0.50080025F, 0.42840117F, 0.4315907F, 0.3637818F, 0.3423468F, 0.43895772F, 0.32715294F, 0.33862478F, 0.24209562F, 0.2088665F, 0.10453609F, 0F, 0.09982371F, 0.29079825F }, new float[] { 0.479499F, 0.5032673F, 0.4574999F, 0.65160424F, 0.6556485F, 0.5688399F, 0.48507902F, 0.5672267F, 0.5650875F, 0.46142495F, 0.46583357F, 0.56049645F, 0.59590894F, 0.5268933F, 0.49983516F, 0.46826598F, 0.58419913F, 0.5954752F, 0.5547679F, 0.5406058F, 0.44954658F, 0.50610095F, 0.58630323F, 0.6579849F, 0.6579849F, 0.596721F, 0.6971699F, 0.69297934F, 0.39008373F, 0.45602793F, 0.44045717F, 0.55831206F, 0.5853301F, 0.5522633F, 0.50658476F, 0.42002517F, 0.46264806F, 0.40022957F, 0.39410448F, 0.32636586F, 0.30040815F, 0.3891156F, 0.28875095F, 0.29969892F, 0.19507861F, 0.1612371F, 0.16159004F, 0.09982371F, 0F, 0.24617873F }, new float[] { 0.42513272F, 0.45070624F, 0.40432256F, 0.57094955F, 0.5746489F, 0.4917033F, 0.4136823F, 0.48249364F, 0.480379F, 0.3795339F, 0.39420235F, 0.48448145F, 0.51714194F, 0.4440417F, 0.4157174F, 0.39617056F, 0.49927008F, 0.50610095F, 0.47574154F, 0.47196355F, 0.40641925F, 0.45692107F, 0.53601253F, 0.6187878F, 0.6343524F, 0.53472704F, 0.61320114F, 0.6325422F, 0.33252102F, 0.3881524F, 0.36950576F, 0.48182285F, 0.49707267F, 0.47610894F, 0.43703955F, 0.3419449F, 0.38662738F, 0.33332086F, 0.3079935F, 0.2645698F, 0.23272717F, 0.33172506F, 0.22203937F, 0.2321999F, 0.25664428F, 0.23840453F, 0.34274402F, 0.29079825F, 0.24617873F, 0F } };

        [TestMethod]
        public void BuildTree2()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(2);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree2, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree3()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(3);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree3, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree4()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(4);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree4, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree10()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(10);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(Tree10, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree50()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(50);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeJC()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, RapidNJ.EvolutionModel.JukesCantor);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeJC, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeBootstrap()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, bootstrapReplicates: 100);

            TolerateTree(tree);

            bool foundRootNode = false;

            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (node.Children.Count > 0)
                {
                    if (!foundRootNode)
                    {
                        if (!(node.Support >= 0))
                        {
                            foundRootNode = true;
                        }
                    }
                    else
                    {
                        Assert.IsTrue(node.Support >= 0, "A node does not have a support value.");
                    }
                    node.Support = double.NaN;
                }
            }

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeJCBootstrap()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, RapidNJ.EvolutionModel.JukesCantor, 100);

            TolerateTree(tree);

            bool foundRootNode = false;

            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (node.Children.Count > 0)
                {
                    if (!foundRootNode)
                    {
                        if (!(node.Support >= 0))
                        {
                            foundRootNode = true;
                        }
                    }
                    else
                    {
                        Assert.IsTrue(node.Support >= 0, "A node does not have a support value.");
                    }
                    node.Support = double.NaN;
                }
            }
            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeJC, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeShort()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(50, 10);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeShort, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeShortNoNegative()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(50, 10);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment, allowNegativeBranches: false);

            TolerateTree(tree);

            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (node.Parent != null)
                {
                    Assert.IsTrue(node.Length >= 0, "A branch has negative length.");
                }
            }

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeShortNoNegative, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeShortJC()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(50, 10);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment, RapidNJ.EvolutionModel.JukesCantor);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeShortJC, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeShortJCNoNegative()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(50, 10);

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(alignment, RapidNJ.EvolutionModel.JukesCantor, allowNegativeBranches: false);

            TolerateTree(tree);

            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (node.Parent != null)
                {
                    Assert.IsTrue(node.Length >= 0, "A branch has negative length.");
                }
            }

            string treeAsNewick = tree.ToString();
            Assert.AreEqual(FullTreeShortJCNoNegative, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree1core()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, numCores: 1);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree2cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, numCores: 2);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree4cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, numCores: 4);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree10cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, numCores: 10);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTree100cores()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, numCores: 100);

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod, ProgressTest]
        public void BuildTreeWithProgress(IProgress<double> progress)
        {
            int callCount = 0;

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, progress: x =>
            {
                callCount++;
                progress.Report(x);
            });

            TolerateTree(tree);

            Assert.IsTrue(callCount > 0, "The progress callback was never called.");

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod, ProgressTest]
        public void BuildTreeBootstrapWithProgress(IProgress<double> progress)
        {
            int callCount = 0;

            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein, bootstrapReplicates: 100, progress: x =>
            {
                callCount++;
                progress.Report(x);
            });

            TolerateTree(tree);

            Assert.IsTrue(callCount > 0, "The progress callback was never called.");

            bool foundRootNode = false;

            foreach (TreeNode node in tree.GetChildrenRecursiveLazy())
            {
                if (node.Children.Count > 0)
                {
                    if (!foundRootNode)
                    {
                        if (!(node.Support >= 0))
                        {
                            foundRootNode = true;
                        }
                    }
                    else
                    {
                        Assert.IsTrue(node.Support >= 0, "A node does not have a support value.");
                    }
                    node.Support = double.NaN;
                }
            }

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildTreeFromLists()
        {
            TreeNode tree = RapidNJ.BuildTreeFromAlignment(FullAlignmentProtein.Keys.ToList(), FullAlignmentProtein.Values.ToList());

            TolerateTree(tree);

            string treeAsNewick = tree.ToString();

            Assert.AreEqual(FullTree, treeAsNewick, "The tree is different than expected.");
        }

        [TestMethod]
        public void BuildDistanceMatrix2()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(2);

            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(alignment);

            Assert.AreEqual(alignment.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(DistMat2[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix3()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(3);

            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(alignment);

            Assert.AreEqual(alignment.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(DistMat3[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix4()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(4);

            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(alignment);

            Assert.AreEqual(alignment.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(DistMat4[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix10()
        {
            Dictionary<string, string> alignment = GetAlignmentProtein(10);

            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(alignment);

            Assert.AreEqual(alignment.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(DistMat10[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix50()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMat[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrixJC()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein, RapidNJ.EvolutionModel.JukesCantor);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMatJC[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix1Core()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein, numCores: 1);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMat[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix2Cores()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein, numCores: 2);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMat[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix4Cores()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein, numCores: 4);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMat[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix10Cores()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein, numCores: 10);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMat[i], distMat[i], "The distance matrix is different than expected.");
            }
        }

        [TestMethod]
        public void BuildDistanceMatrix100Cores()
        {
            float[][] distMat = RapidNJ.BuildDistanceMatrixFromAlignment(FullAlignmentProtein, numCores: 100);

            Assert.AreEqual(FullAlignmentProtein.Count, distMat.Length, "The size of the distance matrix does not correspond to the number of sequences.");
            CollectionAssert.AllItemsAreNotNull(distMat, "One or more rows are null.");
            Assert.AreEqual(distMat.Length, distMat[0].Length, "The distance matrix is not square.");

            for (int i = 0; i < distMat.Length; i++)
            {
                Assert.AreEqual(0, distMat[i][i], "The diagonal of the matrix is not 0.");

                for (int j = i; j < distMat[i].Length; j++)
                {
                    Assert.AreEqual(distMat[i][j], distMat[j][i], "The matrix is not symmetrical.");

                    Assert.IsTrue(distMat[i][j] >= 0, "An element of the matrix is negative.");
                }

                CollectionAssert.AreEqual(FullDistMat[i], distMat[i], "The distance matrix is different than expected.");
            }
        }
    }
}